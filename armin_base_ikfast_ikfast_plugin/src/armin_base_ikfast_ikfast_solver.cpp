/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-10-31 12:09:05.416072
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=IKsin(j[2]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((1.0)*x8);
x13=((1.0)*x9);
x14=((0.41937)*x5);
x15=((1.0)*x7);
x16=((1.11e-6)*x0);
x17=((0.123)*x1);
x18=((3.67e-6)*x3);
x19=((1.0)*x0);
x20=((0.41937)*x7);
x21=((7.8e-7)*x1);
x22=((1.0)*x1);
x23=((0.5)*x5);
x24=((1.11e-6)*x1);
x25=((0.123)*x0);
x26=((7.8e-7)*x0);
x27=(x0*x2);
x28=(x3*x4);
x29=(x4*x5);
x30=(x1*x2);
x31=(x3*x6);
x32=(x5*x6);
x33=(x0*x7);
x34=(x7*x9);
x35=((1.0)*x31);
x36=((0.527)*x31);
x37=((((-1.0)*x29))+x35);
x38=((((1.0)*x28))+(((1.0)*x32)));
x39=(x2*x37);
x40=(x37*x7);
x41=(x0*((x32+x28)));
x42=(x19*(((((-1.0)*x29))+x31)));
x43=(x22*(((((-1.0)*x31))+x29)));
x44=(x22*((x32+x28)));
x45=((-1.0)*x44);
x46=(x45*x7);
x47=((((-1.0)*x15*x41))+(((-1.0)*x2*x22)));
IkReal x52=((1.0)*x19);
x48=(((x1*x7))+((x2*(((((-1.0)*x32*x52))+(((-1.0)*x28*x52)))))));
x49=(((x2*x44))+x33);
x50=((((-1.0)*x15*x45))+(((-1.0)*x19*x2)));
x51=(x50*x8);
eerot[0]=(((x10*x48))+((x11*((((x47*x8))+((x42*x9)))))));
eerot[1]=(((x42*x8))+((x9*((((x41*x7))+x30)))));
eerot[2]=(((x10*(((((-1.0)*x12*x47))+(((-1.0)*x13*x42))))))+((x11*x48)));
IkReal x53=((1.0)*x0);
IkReal x54=((1.0)*x32);
IkReal x55=((1.0)*x28);
eetrans[0]=(((x8*(((((-0.41937)*x0*x31))+((x0*x14*x4))))))+((x0*x23))+(((-1.0)*x16*x54))+(((-1.0)*x16*x55))+(((0.527)*x0*x29))+((x2*(((((-1.0)*x25*x54))+(((-1.0)*x25*x55))))))+(((-1.0)*x2*x21))+((x17*x7))+(((-1.0)*x18*x53))+(((-1.0)*x36*x53))+((x9*(((((-1.0)*x20*x41))+(((-0.41937)*x30))))))+(((0.058999)*x1))+((x7*(((((-1.0)*x26*x55))+(((-1.0)*x26*x54)))))));
eerot[3]=(((x11*((x51+((x43*x9))))))+((x10*x49)));
eerot[4]=(((x9*((x46+x27))))+((x43*x8)));
eerot[5]=(((x11*x49))+((x10*(((((-1.0)*x12*x50))+(((-1.0)*x13*x43)))))));
IkReal x56=((1.0)*x1);
eetrans[1]=(((x1*x18))+(((-0.527)*x1*x29))+(((-1.0)*x2*x26))+((x8*(((((-1.0)*x14*x4*x56))+(((0.41937)*x1*x31))))))+((x7*((((x21*x28))+((x21*x32))))))+(((-1.0)*x23*x56))+((x1*x36))+((x24*x32))+((x24*x28))+((x2*((((x17*x32))+((x17*x28))))))+((x9*(((((-1.0)*x20*x45))+(((-0.41937)*x27))))))+(((0.058999)*x0))+((x25*x7)));
eerot[6]=(((x10*x39))+((x11*((((x40*x8))+((x38*x9)))))));
eerot[7]=(((x34*(((((-1.0)*x35))+x29))))+((x38*x8)));
eerot[8]=(((x10*(((((-1.0)*x12*x40))+(((-1.0)*x13*x38))))))+((x11*x39)));
IkReal x57=((1.0)*x14);
eetrans[2]=((-0.525)+(((-0.5)*x3))+((x7*(((((7.8e-7)*x31))+(((-7.8e-7)*x29))))))+(((-0.527)*x32))+(((-3.67e-6)*x5))+((x34*(((((-1.0)*x4*x57))+(((0.41937)*x31))))))+(((-1.11e-6)*x29))+((x8*(((((-0.41937)*x28))+(((-1.0)*x57*x6))))))+(((1.11e-6)*x31))+(((-0.527)*x28))+((x2*(((((-0.123)*x29))+(((0.123)*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=(px+(((0.41937)*r01)));
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=(py+(((0.41937)*r11)));
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((0.525)+pz+(((0.41937)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x58=((1.0)*px);
IkReal x59=((1.0)*pz);
IkReal x60=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x60))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x59)));
rxp0_2=((((-1.0)*r10*x58))+((py*r00)));
rxp1_0=((((-1.0)*r21*x60))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x59)));
rxp1_2=((((-1.0)*r11*x58))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x60)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x59)));
rxp2_2=((((-1.0)*r12*x58))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x61=((7.8e-7)*r20);
IkReal x62=((0.058999)*r12);
IkReal x63=((1.0)*rxp2_2);
IkReal x64=((0.123)*r21);
IkReal x65=((0.058999)*r02);
IkReal x66=((7.8e-7)*r00);
IkReal x67=((0.123)*r01);
IkReal x68=((0.702702702702703)*npy);
IkReal x69=((450450.45045045)*pp);
IkReal x70=((1.0)*rxp2_0);
IkReal x71=((474774.774774775)*npz);
IkReal x72=((110810.810810811)*npx);
IkReal x73=((7.8e-7)*r10);
IkReal x74=((0.123)*r11);
IkReal x75=((0.058999)*r22);
IkReal x76=((1.0)*rxp2_1);
IkReal x77=((1.40540540540541)*npx);
IkReal x78=((221621.621621622)*npy);
IkReal x79=((1.56e-6)*r01);
IkReal x80=((0.246)*r00);
IkReal x81=((2.0)*rxp1_2);
IkReal x82=((0.117998)*r11);
IkReal x83=((0.246)*r22);
IkReal x84=((0.117998)*r01);
IkReal x85=((0.235996)*r00);
IkReal x86=((0.235996)*r10);
IkReal x87=((4.0)*rxp0_2);
IkReal x88=((2.0)*rxp1_0);
IkReal x89=((949549.54954955)*npy);
IkReal x90=((0.246)*r02);
IkReal x91=((1.40540540540541)*npz);
IkReal x92=((2.0)*rxp1_1);
IkReal x93=((0.117998)*r21);
IkReal x94=((0.246)*r12);
IkReal x95=((0.235996)*r20);
IkReal x96=((4.0)*rxp0_1);
IkReal x97=((4.0)*rxp0_0);
IkReal x98=((1899099.0990991)*npx);
IkReal x99=((1.56e-6)*r21);
IkReal x100=((0.246)*r20);
IkReal x101=((1.56e-6)*r11);
IkReal x102=((0.246)*r10);
IkReal x103=((-0.117998)*r01);
IkReal x104=((-0.058999)*r02);
IkReal x105=((((-1.0)*x100))+x99);
IkReal x106=((((-1.0)*x102))+x101);
IkReal x107=(rxp2_2+x62);
IkReal x108=(rxp2_1+x74);
IkReal x109=((-17737.4405348521)+x67);
IkReal x110=(x100+x99);
IkReal x111=(x101+x102);
IkReal x112=(x75+x73);
IkReal x113=(x75+x74);
IkReal x114=(x70+x69);
IkReal x115=(x71+x66);
IkReal x116=(x72+x69);
IkReal x117=(x62+x63);
IkReal x118=(x61+x64);
IkReal x119=((-17737.4405348521)+rxp2_0+x72);
IkReal x120=(x66+x68);
IkReal x121=(x77+x79);
IkReal x122=(x83+x81);
IkReal x123=(x89+x90);
IkReal x124=(x88+x91);
IkReal x125=(x72+x68);
IkReal x126=(x93+x94);
IkReal x127=(x67+x69);
IkReal x128=(x78+x80);
op[0]=((((-1.0)*x117))+x64+(((-1.0)*x61)));
op[1]=x65;
op[2]=x110;
op[3]=0;
op[4]=((((-1.0)*x117))+x61+(((-1.0)*x64)));
op[5]=x65;
op[6]=x65;
op[7]=(x62+x64+(((-1.0)*x63))+(((-1.0)*x61)));
op[8]=0;
op[9]=x110;
op[10]=x65;
op[11]=(x61+x62+(((-1.0)*x63))+(((-1.0)*x64)));
op[12]=((((-1.0)*x114))+(((-1.0)*x115))+x125+x109);
op[13]=((((-1.0)*x76))+(((-1.0)*x112))+x74);
op[14]=((((-1.0)*x78))+x121+x80);
op[15]=x111;
op[16]=((-17737.4405348521)+(((-1.0)*x71))+(((-1.0)*x114))+(((-1.0)*x125))+x66+(((-1.0)*x67)));
op[17]=((((-1.0)*x76))+(((-1.0)*x113))+x73);
op[18]=((((-1.0)*x73))+(((-1.0)*x76))+x113);
op[19]=((((-1.0)*x71))+(((-1.0)*x127))+x120+x119);
op[20]=x111;
op[21]=((((-1.0)*x79))+(((-1.0)*x128))+x77);
op[22]=((((-1.0)*x74))+(((-1.0)*x76))+x112);
op[23]=(rxp2_0+(((-1.0)*x115))+(((-1.0)*x116))+x109+(((-1.0)*x68)));
op[24]=((((-1.0)*x122))+(((-1.0)*x82)));
op[25]=x84;
op[26]=((((-1.0)*x87))+(((-1.0)*x86)));
op[27]=x85;
op[28]=(x82+x81+(((-1.0)*x83)));
op[29]=x103;
op[30]=x84;
op[31]=((((-1.0)*x122))+x82);
op[32]=x85;
op[33]=(x86+(((-1.0)*x87)));
op[34]=x103;
op[35]=(x81+(((-1.0)*x83))+(((-1.0)*x82)));
op[36]=((((-1.0)*x123))+(((-1.0)*x124)));
op[37]=((((-1.0)*x126))+(((-1.0)*x92)));
op[38]=((((-1.0)*x97))+(((-1.0)*x98)));
op[39]=((((-1.0)*x96))+(((-1.0)*x95)));
op[40]=(x88+x89+(((-1.0)*x90))+(((-1.0)*x91)));
op[41]=(x93+x92+(((-1.0)*x94)));
op[42]=(x93+(((-1.0)*x94))+(((-1.0)*x92)));
op[43]=(x88+x90+(((-1.0)*x91))+(((-1.0)*x89)));
op[44]=(x95+(((-1.0)*x96)));
op[45]=(x97+(((-1.0)*x98)));
op[46]=((((-1.0)*x126))+x92);
op[47]=((((-1.0)*x124))+x123);
op[48]=((((-1.0)*x118))+x107);
op[49]=x104;
op[50]=x105;
op[51]=0;
op[52]=(x118+x107);
op[53]=x104;
op[54]=x104;
op[55]=(rxp2_2+(((-1.0)*x118))+(((-1.0)*x62)));
op[56]=0;
op[57]=x105;
op[58]=x104;
op[59]=(rxp2_2+x118+(((-1.0)*x62)));
op[60]=((((-1.0)*x120))+(((-1.0)*x127))+x119+x71);
op[61]=((((-1.0)*x73))+(((-1.0)*x74))+rxp2_1+x75);
op[62]=((((-1.0)*x77))+(((-1.0)*x128))+x79);
op[63]=x106;
op[64]=(rxp2_0+(((-1.0)*x116))+x115+x109+x68);
op[65]=(x112+x108);
op[66]=((((-1.0)*x74))+rxp2_1+(((-1.0)*x112)));
op[67]=((((-1.0)*x114))+x115+x109+x72+(((-1.0)*x68)));
op[68]=x106;
op[69]=((((-1.0)*x78))+(((-1.0)*x121))+x80);
op[70]=((((-1.0)*x75))+x108+x73);
op[71]=((-17737.4405348521)+(((-1.0)*x72))+(((-1.0)*x114))+x71+x68+(((-1.0)*x67))+(((-1.0)*x66)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x129=htj4*htj4;
CheckValue<IkReal> x130=IKPowWithIntegerCheck(((1.0)+x129),-1);
if(!x130.valid){
continue;
}
cj4array[numsolutions]=((x130.value)*(((1.0)+(((-1.0)*x129)))));
CheckValue<IkReal> x131=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x131.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x131.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x132=htj5*htj5;
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+x132),-1);
if(!x133.valid){
continue;
}
cj5array[numsolutions]=((x133.value)*(((1.0)+(((-1.0)*x132)))));
CheckValue<IkReal> x134=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x134.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x134.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x135=htj0*htj0;
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((1.0)+x135),-1);
if(!x136.valid){
continue;
}
cj0array[numsolutions]=((x136.value)*(((1.0)+(((-1.0)*x135)))));
CheckValue<IkReal> x137=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x137.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x137.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x138=(r20*sj0);
IkReal x139=(r21*sj0);
IkReal x140=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x140;
j3eval[1]=IKsign(x140);
j3eval[2]=((IKabs((((cj4*sj5*x138))+(((-1.0)*r22*sj0*sj4))+((cj4*cj5*x139)))))+(IKabs(((((-1.0)*sj5*x139))+((cj5*x138))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x141=((1.0)*sj5);
IkReal x142=(cj0*r21);
IkReal x143=((1.0)*sj4);
IkReal x144=(cj0*r20);
IkReal x145=((((-1.0)*cj5*r11*x143))+(((-1.0)*r10*sj4*x141))+(((-1.0)*cj4*r12)));
j3eval[0]=x145;
j3eval[1]=((IKabs((((cj5*x144))+(((-1.0)*x141*x142)))))+(IKabs((((cj4*cj5*x142))+((cj4*sj5*x144))+(((-1.0)*cj0*r22*x143))))));
j3eval[2]=IKsign(x145);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x146=((1.0)*sj4);
IkReal x147=((((-1.0)*r20*sj5*x146))+(((-1.0)*cj5*r21*x146))+(((-1.0)*cj4*r22)));
j3eval[0]=x147;
j3eval[1]=IKsign(x147);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x148=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x148;
j3eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))))+(IKabs((((cj4*r20*sj5))+((cj4*cj5*r21))+(((-1.0)*r22*sj4))))));
j3eval[2]=IKsign(x148);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x149=((1.0)*sj4);
IkReal x150=((((-1.0)*r20*sj5*x149))+(((-1.0)*cj5*r21*x149))+(((-1.0)*cj4*r22)));
j3eval[0]=x150;
j3eval[1]=((IKabs(((((-1.0)*r01*sj5))+((cj5*r00)))))+(IKabs((((cj4*r00*sj5))+(((-1.0)*r02*x149))+((cj4*cj5*r01))))));
j3eval[2]=IKsign(x150);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x151=cj4*cj4;
IkReal x152=cj5*cj5;
IkReal x153=r10*r10;
IkReal x154=r11*r11;
IkReal x155=r12*r12;
IkReal x156=(cj5*r10);
IkReal x157=((2.0)*sj5);
IkReal x158=(cj5*r11);
IkReal x159=((1.0)*x151);
IkReal x160=(cj4*r12*sj4);
IkReal x161=(x152*x154);
IkReal x162=(x152*x153);
IkReal x163=((((-1.0)*r11*x151*x156*x157))+(((-1.0)*x159*x161))+(((-1.0)*x153*x159))+((x151*x162))+((x151*x155))+x161+((r11*x156*x157))+(((-1.0)*x162))+(((-1.0)*x155))+(((-1.0)*x154))+((r10*x157*x160))+(((2.0)*x158*x160)));
j3eval[0]=x163;
j3eval[1]=IKsign(x163);
j3eval[2]=((IKabs((((r11*sj5))+(((-1.0)*x156)))))+(IKabs((((cj4*x158))+((cj4*r10*sj5))+(((-1.0)*r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x164=cj4*cj4;
IkReal x165=cj5*cj5;
IkReal x166=r10*r10;
IkReal x167=r11*r11;
IkReal x168=r12*r12;
IkReal x169=(cj5*r10);
IkReal x170=(cj5*r11);
IkReal x171=(r10*sj5);
IkReal x172=((1.0)*x164);
IkReal x173=((2.0)*r11*sj5);
IkReal x174=(x165*x167);
IkReal x175=((2.0)*cj4*r12*sj4);
IkReal x176=(x165*x166);
CheckValue<IkReal> x177 = IKatan2WithCheck(IkReal((((cj4*x170))+((cj4*x171))+(((-1.0)*r12*sj4)))),IkReal((((r11*sj5))+(((-1.0)*x169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x177.valid){
continue;
}
CheckValue<IkReal> x178=IKPowWithIntegerCheck(IKsign((((x169*x173))+(((-1.0)*x176))+x174+(((-1.0)*x164*x169*x173))+(((-1.0)*x167))+(((-1.0)*x168))+((x164*x168))+((x164*x176))+((x171*x175))+((x170*x175))+(((-1.0)*x172*x174))+(((-1.0)*x166*x172)))),-1);
if(!x178.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x177.value)+(((1.5707963267949)*(x178.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x179=IKcos(j3);
IkReal x180=IKsin(j3);
IkReal x181=((1.0)*cj4);
IkReal x182=(cj5*x179);
IkReal x183=(cj5*x180);
IkReal x184=((1.0)*r11*sj5);
IkReal x185=(sj4*x180);
IkReal x186=(sj5*x180);
IkReal x187=((1.0)*x179);
evalcond[0]=(((cj4*r11*x182))+(((-1.0)*r12*sj4*x187))+(((-1.0)*x180*x184))+((cj4*r10*sj5*x179))+((r10*x183)));
evalcond[1]=(((r20*x182))+(((-1.0)*r21*x181*x183))+(((-1.0)*r20*x181*x186))+(((-1.0)*r21*sj5*x187))+((r22*x185)));
evalcond[2]=((((-1.0)*r00*x181*x186))+((r00*x182))+(((-1.0)*r01*sj5*x187))+((r02*x185))+(((-1.0)*r01*x181*x183)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x181*x186))+((r12*x185))+(((-1.0)*r11*x181*x183))+((r10*x182))+(((-1.0)*x179*x184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x188=(cj5*r21);
IkReal x189=((6.324)*sj4);
IkReal x190=((2.108)*cj4);
IkReal x191=(r01*sj5);
IkReal x192=(cj4*r22);
IkReal x193=(cj5*r00);
IkReal x194=(r20*sj5);
IkReal x195=((4.44e-6)*sj4);
IkReal x196=((3.12e-6)*cj4);
IkReal x197=((9.36e-6)*sj4);
IkReal x198=((9.36e-6)*cj4);
IkReal x199=(cj5*r01);
IkReal x200=(cj5*r20);
IkReal x201=(r00*sj5);
IkReal x202=((1.332e-5)*sj4);
IkReal x203=(r21*sj5);
IkReal x204=((2.108)*sj4);
IkReal x205=(cj4*r02);
IkReal x206=((3.12e-6)*sj4);
IkReal x207=((1.332e-5)*x205);
IkReal x208=((1.476)*x200);
IkReal x209=((1.476)*x193);
IkReal x210=(x201*x202);
IkReal x211=(x188*x198);
IkReal x212=(x194*x198);
IkReal x213=(x199*x202);
IkReal x214=(x198*x201);
IkReal x215=(x198*x199);
IkReal x216=(x214+x215+x209);
IkReal x217=((((12.0)*pz))+(((6.324)*x192))+((x188*x189))+((x189*x194))+(((1.476)*x203))+((r22*x197)));
IkReal x218=(x210+x211+x212+x213+x207+x208);
IkReal x219=((((1.476)*x191))+(((1.332e-5)*x192))+(((12.0)*px))+((x194*x202))+((x189*x201))+((x189*x199))+((x188*x202))+(((6.324)*x205))+((r02*x197)));
j1eval[0]=((16.00011744)+(IKabs(((-2.0)+x218+(((-1.0)*x217)))))+(IKabs(((2.0)+(((-1.0)*r22*x206))+(((-1.0)*x194*x204))+(((-0.492)*x203))+((x195*x201))+((x188*x196))+(((-1.0)*r22*x190))+((x195*x199))+((x194*x196))+(((-4.0)*pz))+(((0.492)*x200))+(((4.44e-6)*x205))+(((-1.0)*x188*x204)))))+(IKabs(((-1.468e-5)+x216+(((-1.0)*x219)))))+(IKabs(((1.468e-5)+(((-1.0)*x188*x195))+(((-1.0)*x201*x204))+(((-1.0)*x194*x195))+((x196*x201))+(((0.492)*x193))+(((-0.492)*x191))+(((-1.0)*r02*x206))+((x196*x199))+(((-1.0)*r02*x190))+(((-4.44e-6)*x192))+(((-1.0)*x199*x204))+(((-4.0)*px)))))+(IKabs(((2.0)+x218+(((-1.0)*x217)))))+(IKabs(((1.468e-5)+x216+(((-1.0)*x219))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x220=(cj5*r21);
IkReal x221=((6.324)*sj4);
IkReal x222=(cj4*r22);
IkReal x223=(cj5*r20);
IkReal x224=(r20*sj5);
IkReal x225=((9.36e-6)*cj4);
IkReal x226=(r21*sj5);
IkReal x227=((3.12e-6)*cj4);
IkReal x228=(cj4*r02);
IkReal x229=(r22*sj4);
IkReal x230=((2.108)*sj4);
IkReal x231=((1.332e-5)*x228);
IkReal x232=((1.476)*x223);
IkReal x233=((4.44e-6)*x228);
IkReal x234=((0.492)*x223);
IkReal x235=(cj5*r01*sj4);
IkReal x236=(r00*sj4*sj5);
IkReal x237=((1.332e-5)*x236);
IkReal x238=(x220*x225);
IkReal x239=(x224*x225);
IkReal x240=((1.332e-5)*x235);
IkReal x241=((4.44e-6)*x235);
IkReal x242=((4.44e-6)*x236);
IkReal x243=(x224*x227);
IkReal x244=(x220*x227);
IkReal x245=((((12.0)*pz))+((x220*x221))+(((6.324)*x222))+(((9.36e-6)*x229))+((x221*x224))+(((1.476)*x226)));
IkReal x246=((((4.0)*pz))+(((2.108)*x222))+(((0.492)*x226))+(((3.12e-6)*x229))+((x224*x230))+((x220*x230)));
IkReal x247=(x233+x234+x243+x242+x241+x244);
IkReal x248=(x238+x239+x232+x231+x237+x240);
op[0]=((2.0)+x247+(((-1.0)*x246)));
op[1]=-2.936e-5;
op[2]=((2.0)+x248+(((-1.0)*x245)));
op[3]=-5.872e-5;
op[4]=((-2.0)+x248+(((-1.0)*x245)));
op[5]=-2.936e-5;
op[6]=((-2.0)+x247+(((-1.0)*x246)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x249=(cj4*r02);
IkReal x250=(r01*sj5);
IkReal x251=(cj5*r00);
IkReal x252=(cj4*r22);
IkReal x253=((9.36e-6)*cj4);
IkReal x254=(cj5*r01);
IkReal x255=(r02*sj4);
IkReal x256=(r00*sj5);
IkReal x257=((6.324)*sj4);
IkReal x258=((3.12e-6)*cj4);
IkReal x259=((2.108)*sj4);
IkReal x260=((0.492)*x251);
IkReal x261=((1.476)*x251);
IkReal x262=(r20*sj4*sj5);
IkReal x263=(cj5*r21*sj4);
IkReal x264=(x256*x258);
IkReal x265=(x253*x256);
IkReal x266=(x253*x254);
IkReal x267=(x254*x258);
IkReal x268=(x265+x266+x261);
IkReal x269=(x264+x267+x260);
IkReal x270=((((12.0)*px))+(((1.332e-5)*x252))+(((6.324)*x249))+((x256*x257))+((x254*x257))+(((9.36e-6)*x255))+(((1.332e-5)*x262))+(((1.332e-5)*x263))+(((1.476)*x250)));
IkReal x271=((((4.0)*px))+(((3.12e-6)*x255))+(((0.492)*x250))+((x256*x259))+(((4.44e-6)*x262))+(((4.44e-6)*x263))+((x254*x259))+(((2.108)*x249))+(((4.44e-6)*x252)));
j1evalpoly[0]=((-1.468e-5)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.468e-5)+x269+(((-1.0)*x271))))))+x269+(((4.0)*htj1))+(((-1.0)*x271))+(((8.0)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((1.468e-5)+x268+(((-1.0)*x270))))))+(((htj1*htj1)*(((-1.468e-5)+x268+(((-1.0)*x270))))))+(((4.0)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x272=(cj4*r22);
IkReal x273=((1.0)*sj1);
IkReal x274=(cj5*sj4);
IkReal x275=(cj4*r02);
IkReal x276=(sj4*sj5);
if( IKabs((((cj1*x275))+((r20*sj1*x276))+((cj1*r01*x274))+((r21*sj1*x274))+((cj1*r00*x276))+((sj1*x272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x273*x275))+((cj1*r21*x274))+(((-1.0)*r01*x273*x274))+((cj1*r20*x276))+((cj1*x272))+(((-1.0)*r00*x273*x276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x275))+((r20*sj1*x276))+((cj1*r01*x274))+((r21*sj1*x274))+((cj1*r00*x276))+((sj1*x272))))+IKsqr(((((-1.0)*x273*x275))+((cj1*r21*x274))+(((-1.0)*r01*x273*x274))+((cj1*r20*x276))+((cj1*x272))+(((-1.0)*r00*x273*x276))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x275))+((r20*sj1*x276))+((cj1*r01*x274))+((r21*sj1*x274))+((cj1*r00*x276))+((sj1*x272))), ((((-1.0)*x273*x275))+((cj1*r21*x274))+(((-1.0)*r01*x273*x274))+((cj1*r20*x276))+((cj1*x272))+(((-1.0)*r00*x273*x276))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x277=IKsin(j2);
IkReal x278=IKcos(j2);
IkReal x279=(r02*sj4);
IkReal x280=((1.0)*cj3);
IkReal x281=(cj3*cj4);
IkReal x282=(r00*sj5);
IkReal x283=(r22*sj4);
IkReal x284=((0.123)*sj5);
IkReal x285=(cj5*r00);
IkReal x286=(cj5*r21);
IkReal x287=(cj5*r20);
IkReal x288=((1.0)*sj5);
IkReal x289=((1.0)*cj4);
IkReal x290=((7.8e-7)*cj4);
IkReal x291=(cj5*r01);
IkReal x292=((1.0)*sj4);
IkReal x293=(r20*sj5);
IkReal x294=(cj1*x278);
IkReal x295=(sj1*x277);
IkReal x296=(sj1*x278);
IkReal x297=((0.527)*x277);
IkReal x298=(cj1*x277);
IkReal x299=(x294+x295);
evalcond[0]=((((-1.0)*x286*x292))+(((-1.0)*r22*x289))+(((-1.0)*r20*sj4*x288))+x299);
evalcond[1]=((((-1.0)*x296))+(((-1.0)*r02*x289))+(((-1.0)*x291*x292))+x298+(((-1.0)*x282*x292)));
evalcond[2]=(((x281*x291))+(((-1.0)*r01*sj3*x288))+((sj3*x285))+x299+(((-1.0)*x279*x280))+((x281*x282)));
evalcond[3]=((((-1.0)*r21*sj3*x288))+(((-1.0)*x298))+((x281*x293))+(((-1.0)*x280*x283))+((sj3*x287))+x296+((x281*x286)));
evalcond[4]=((((-0.527)*x295))+(((-0.527)*x294))+((x290*x293))+(((0.123)*x287))+(((-3.67e-6)*sj1))+(((-1.0)*r21*x284))+(((-1.11e-6)*x296))+(((-1.0)*pz))+((x286*x290))+(((-7.8e-7)*x283))+(((-0.5)*cj1))+(((1.11e-6)*x298)));
evalcond[5]=(((x290*x291))+(((-1.0)*cj1*x297))+(((0.123)*x285))+(((0.5)*sj1))+((x282*x290))+(((-1.11e-6)*x294))+(((-1.11e-6)*x295))+(((-1.0)*px))+(((-1.0)*r01*x284))+(((-3.67e-6)*cj1))+(((0.527)*x296))+(((-7.8e-7)*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x300=((1.0)*sj4);
CheckValue<IkReal> x301 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal((((cj4*r00*sj5))+(((-1.0)*r02*x300))+((cj4*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x301.valid){
continue;
}
CheckValue<IkReal> x302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x300))+(((-1.0)*cj4*r22))+(((-1.0)*cj5*r21*x300)))),-1);
if(!x302.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x301.value)+(((1.5707963267949)*(x302.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x303=IKcos(j3);
IkReal x304=IKsin(j3);
IkReal x305=((1.0)*cj4);
IkReal x306=(cj5*x303);
IkReal x307=(cj5*x304);
IkReal x308=((1.0)*r11*sj5);
IkReal x309=(sj4*x304);
IkReal x310=(sj5*x304);
IkReal x311=((1.0)*x303);
evalcond[0]=((((-1.0)*r12*sj4*x311))+((cj4*r11*x306))+((r10*x307))+(((-1.0)*x304*x308))+((cj4*r10*sj5*x303)));
evalcond[1]=(((r22*x309))+(((-1.0)*r21*x305*x307))+((r20*x306))+(((-1.0)*r20*x305*x310))+(((-1.0)*r21*sj5*x311)));
evalcond[2]=(((r02*x309))+(((-1.0)*r01*sj5*x311))+(((-1.0)*r00*x305*x310))+(((-1.0)*r01*x305*x307))+((r00*x306)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x305*x307))+(((-1.0)*x303*x308))+(((-1.0)*r10*x305*x310))+((r10*x306))+((r12*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x312=(cj5*r21);
IkReal x313=((6.324)*sj4);
IkReal x314=((2.108)*cj4);
IkReal x315=(r01*sj5);
IkReal x316=(cj4*r22);
IkReal x317=(cj5*r00);
IkReal x318=(r20*sj5);
IkReal x319=((4.44e-6)*sj4);
IkReal x320=((3.12e-6)*cj4);
IkReal x321=((9.36e-6)*sj4);
IkReal x322=((9.36e-6)*cj4);
IkReal x323=(cj5*r01);
IkReal x324=(cj5*r20);
IkReal x325=(r00*sj5);
IkReal x326=((1.332e-5)*sj4);
IkReal x327=(r21*sj5);
IkReal x328=((2.108)*sj4);
IkReal x329=(cj4*r02);
IkReal x330=((3.12e-6)*sj4);
IkReal x331=((1.332e-5)*x329);
IkReal x332=((1.476)*x324);
IkReal x333=((1.476)*x317);
IkReal x334=(x325*x326);
IkReal x335=(x312*x322);
IkReal x336=(x318*x322);
IkReal x337=(x323*x326);
IkReal x338=(x322*x325);
IkReal x339=(x322*x323);
IkReal x340=(x339+x338+x333);
IkReal x341=((((12.0)*pz))+((x312*x313))+((r22*x321))+(((6.324)*x316))+(((1.476)*x327))+((x313*x318)));
IkReal x342=(x332+x331+x337+x336+x335+x334);
IkReal x343=(((x318*x326))+(((6.324)*x329))+((r02*x321))+(((12.0)*px))+(((1.476)*x315))+((x313*x325))+((x313*x323))+((x312*x326))+(((1.332e-5)*x316)));
j1eval[0]=((16.00011744)+(IKabs(((1.468e-5)+x340+(((-1.0)*x343)))))+(IKabs(((1.468e-5)+(((-1.0)*r02*x314))+(((-1.0)*x312*x319))+((x320*x323))+((x320*x325))+(((-1.0)*x318*x319))+(((-1.0)*x325*x328))+(((0.492)*x317))+(((-1.0)*x323*x328))+(((-1.0)*r02*x330))+(((-4.44e-6)*x316))+(((-4.0)*px))+(((-0.492)*x315)))))+(IKabs(((2.0)+x342+(((-1.0)*x341)))))+(IKabs(((2.0)+((x318*x320))+(((0.492)*x324))+(((4.44e-6)*x329))+((x312*x320))+(((-0.492)*x327))+(((-1.0)*x318*x328))+(((-1.0)*r22*x314))+(((-4.0)*pz))+(((-1.0)*r22*x330))+((x319*x323))+((x319*x325))+(((-1.0)*x312*x328)))))+(IKabs(((-2.0)+x342+(((-1.0)*x341)))))+(IKabs(((-1.468e-5)+x340+(((-1.0)*x343))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x344=(cj5*r21);
IkReal x345=((6.324)*sj4);
IkReal x346=(cj4*r22);
IkReal x347=(cj5*r20);
IkReal x348=(r20*sj5);
IkReal x349=((9.36e-6)*cj4);
IkReal x350=(r21*sj5);
IkReal x351=((3.12e-6)*cj4);
IkReal x352=(cj4*r02);
IkReal x353=(r22*sj4);
IkReal x354=((2.108)*sj4);
IkReal x355=((1.332e-5)*x352);
IkReal x356=((1.476)*x347);
IkReal x357=((4.44e-6)*x352);
IkReal x358=((0.492)*x347);
IkReal x359=(cj5*r01*sj4);
IkReal x360=(r00*sj4*sj5);
IkReal x361=((1.332e-5)*x360);
IkReal x362=(x344*x349);
IkReal x363=(x348*x349);
IkReal x364=((1.332e-5)*x359);
IkReal x365=((4.44e-6)*x359);
IkReal x366=((4.44e-6)*x360);
IkReal x367=(x348*x351);
IkReal x368=(x344*x351);
IkReal x369=((((6.324)*x346))+(((12.0)*pz))+((x345*x348))+((x344*x345))+(((1.476)*x350))+(((9.36e-6)*x353)));
IkReal x370=((((2.108)*x346))+(((0.492)*x350))+(((4.0)*pz))+((x344*x354))+(((3.12e-6)*x353))+((x348*x354)));
IkReal x371=(x357+x358+x368+x365+x366+x367);
IkReal x372=(x355+x356+x361+x362+x363+x364);
op[0]=((2.0)+(((-1.0)*x370))+x371);
op[1]=-2.936e-5;
op[2]=((2.0)+(((-1.0)*x369))+x372);
op[3]=-5.872e-5;
op[4]=((-2.0)+(((-1.0)*x369))+x372);
op[5]=-2.936e-5;
op[6]=((-2.0)+(((-1.0)*x370))+x371);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x373=(cj4*r02);
IkReal x374=(r01*sj5);
IkReal x375=(cj5*r00);
IkReal x376=(cj4*r22);
IkReal x377=((9.36e-6)*cj4);
IkReal x378=(cj5*r01);
IkReal x379=(r02*sj4);
IkReal x380=(r00*sj5);
IkReal x381=((6.324)*sj4);
IkReal x382=((3.12e-6)*cj4);
IkReal x383=((2.108)*sj4);
IkReal x384=((0.492)*x375);
IkReal x385=((1.476)*x375);
IkReal x386=(r20*sj4*sj5);
IkReal x387=(cj5*r21*sj4);
IkReal x388=(x380*x382);
IkReal x389=(x377*x380);
IkReal x390=(x377*x378);
IkReal x391=(x378*x382);
IkReal x392=(x385+x389+x390);
IkReal x393=(x384+x388+x391);
IkReal x394=(((x378*x381))+(((6.324)*x373))+(((1.476)*x374))+(((12.0)*px))+(((1.332e-5)*x376))+(((1.332e-5)*x387))+(((1.332e-5)*x386))+((x380*x381))+(((9.36e-6)*x379)));
IkReal x395=(((x378*x383))+(((4.44e-6)*x387))+(((4.44e-6)*x386))+(((4.0)*px))+(((0.492)*x374))+(((3.12e-6)*x379))+(((2.108)*x373))+((x380*x383))+(((4.44e-6)*x376)));
j1evalpoly[0]=((-1.468e-5)+(((-1.0)*x395))+(((htj1*htj1*htj1*htj1)*(((1.468e-5)+(((-1.0)*x394))+x392))))+(((htj1*htj1)*(((-1.468e-5)+(((-1.0)*x394))+x392))))+x393+(((4.0)*htj1))+(((8.0)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.468e-5)+(((-1.0)*x395))+x393))))+(((4.0)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x396=(cj4*r22);
IkReal x397=((1.0)*sj1);
IkReal x398=(cj5*sj4);
IkReal x399=(cj4*r02);
IkReal x400=(sj4*sj5);
if( IKabs((((r21*sj1*x398))+((cj1*r00*x400))+((sj1*x396))+((cj1*x399))+((cj1*r01*x398))+((r20*sj1*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x397*x398))+((cj1*r20*x400))+(((-1.0)*r00*x397*x400))+(((-1.0)*x397*x399))+((cj1*x396))+((cj1*r21*x398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x398))+((cj1*r00*x400))+((sj1*x396))+((cj1*x399))+((cj1*r01*x398))+((r20*sj1*x400))))+IKsqr(((((-1.0)*r01*x397*x398))+((cj1*r20*x400))+(((-1.0)*r00*x397*x400))+(((-1.0)*x397*x399))+((cj1*x396))+((cj1*r21*x398))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x398))+((cj1*r00*x400))+((sj1*x396))+((cj1*x399))+((cj1*r01*x398))+((r20*sj1*x400))), ((((-1.0)*r01*x397*x398))+((cj1*r20*x400))+(((-1.0)*r00*x397*x400))+(((-1.0)*x397*x399))+((cj1*x396))+((cj1*r21*x398))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x401=IKsin(j2);
IkReal x402=IKcos(j2);
IkReal x403=(r02*sj4);
IkReal x404=((1.0)*cj3);
IkReal x405=(cj3*cj4);
IkReal x406=(r00*sj5);
IkReal x407=(r22*sj4);
IkReal x408=((0.123)*sj5);
IkReal x409=(cj5*r00);
IkReal x410=(cj5*r21);
IkReal x411=(cj5*r20);
IkReal x412=((1.0)*sj5);
IkReal x413=((1.0)*cj4);
IkReal x414=((7.8e-7)*cj4);
IkReal x415=(cj5*r01);
IkReal x416=((1.0)*sj4);
IkReal x417=(r20*sj5);
IkReal x418=(cj1*x402);
IkReal x419=(sj1*x401);
IkReal x420=(sj1*x402);
IkReal x421=((0.527)*x401);
IkReal x422=(cj1*x401);
IkReal x423=(x418+x419);
evalcond[0]=((((-1.0)*r20*sj4*x412))+x423+(((-1.0)*x410*x416))+(((-1.0)*r22*x413)));
evalcond[1]=((((-1.0)*x420))+(((-1.0)*x406*x416))+(((-1.0)*r02*x413))+x422+(((-1.0)*x415*x416)));
evalcond[2]=((((-1.0)*r01*sj3*x412))+((x405*x406))+((x405*x415))+((sj3*x409))+(((-1.0)*x403*x404))+x423);
evalcond[3]=((((-1.0)*x422))+((x405*x417))+((x405*x410))+((sj3*x411))+x420+(((-1.0)*x404*x407))+(((-1.0)*r21*sj3*x412)));
evalcond[4]=((((0.123)*x411))+(((-3.67e-6)*sj1))+((x410*x414))+((x414*x417))+(((-1.0)*r21*x408))+(((1.11e-6)*x422))+(((-1.0)*pz))+(((-1.11e-6)*x420))+(((-0.5)*cj1))+(((-7.8e-7)*x407))+(((-0.527)*x419))+(((-0.527)*x418)));
evalcond[5]=((((-1.11e-6)*x419))+(((-1.11e-6)*x418))+(((-1.0)*cj1*x421))+(((0.5)*sj1))+((x414*x415))+((x406*x414))+(((-1.0)*px))+(((-3.67e-6)*cj1))+(((0.527)*x420))+(((-1.0)*r01*x408))+(((-7.8e-7)*x403))+(((0.123)*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x424 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal((((cj4*r20*sj5))+((cj4*cj5*r21))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
CheckValue<IkReal> x425=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x425.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x424.value)+(((1.5707963267949)*(x425.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x426=IKcos(j3);
IkReal x427=IKsin(j3);
IkReal x428=((1.0)*cj4);
IkReal x429=(cj5*x426);
IkReal x430=(cj5*x427);
IkReal x431=((1.0)*r11*sj5);
IkReal x432=(sj4*x427);
IkReal x433=(sj5*x427);
IkReal x434=((1.0)*x426);
evalcond[0]=((((-1.0)*x427*x431))+(((-1.0)*r12*sj4*x434))+((cj4*r10*sj5*x426))+((r10*x430))+((cj4*r11*x429)));
evalcond[1]=(((r20*x429))+(((-1.0)*r21*x428*x430))+(((-1.0)*r21*sj5*x434))+((r22*x432))+(((-1.0)*r20*x428*x433)));
evalcond[2]=((((-1.0)*r01*sj5*x434))+((r02*x432))+((r00*x429))+(((-1.0)*r01*x428*x430))+(((-1.0)*r00*x428*x433)));
evalcond[3]=((-1.0)+((r12*x432))+(((-1.0)*x426*x431))+((r10*x429))+(((-1.0)*r10*x428*x433))+(((-1.0)*r11*x428*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x435=(cj5*r21);
IkReal x436=((6.324)*sj4);
IkReal x437=((2.108)*cj4);
IkReal x438=(r01*sj5);
IkReal x439=(cj4*r22);
IkReal x440=(cj5*r00);
IkReal x441=(r20*sj5);
IkReal x442=((4.44e-6)*sj4);
IkReal x443=((3.12e-6)*cj4);
IkReal x444=((9.36e-6)*sj4);
IkReal x445=((9.36e-6)*cj4);
IkReal x446=(cj5*r01);
IkReal x447=(cj5*r20);
IkReal x448=(r00*sj5);
IkReal x449=((1.332e-5)*sj4);
IkReal x450=(r21*sj5);
IkReal x451=((2.108)*sj4);
IkReal x452=(cj4*r02);
IkReal x453=((3.12e-6)*sj4);
IkReal x454=((1.332e-5)*x452);
IkReal x455=((1.476)*x447);
IkReal x456=((1.476)*x440);
IkReal x457=(x448*x449);
IkReal x458=(x435*x445);
IkReal x459=(x441*x445);
IkReal x460=(x446*x449);
IkReal x461=(x445*x448);
IkReal x462=(x445*x446);
IkReal x463=(x456+x462+x461);
IkReal x464=((((12.0)*pz))+(((6.324)*x439))+(((1.476)*x450))+((r22*x444))+((x436*x441))+((x435*x436)));
IkReal x465=(x458+x459+x457+x454+x455+x460);
IkReal x466=(((x435*x449))+(((6.324)*x452))+((r02*x444))+(((12.0)*px))+((x441*x449))+(((1.332e-5)*x439))+((x436*x446))+((x436*x448))+(((1.476)*x438)));
j1eval[0]=((16.00011744)+(IKabs(((2.0)+(((-1.0)*x464))+x465)))+(IKabs(((2.0)+((x435*x443))+(((-1.0)*x435*x451))+(((-0.492)*x450))+(((4.44e-6)*x452))+((x441*x443))+(((-1.0)*r22*x453))+((x442*x448))+((x442*x446))+(((-4.0)*pz))+(((-1.0)*r22*x437))+(((0.492)*x447))+(((-1.0)*x441*x451)))))+(IKabs(((-2.0)+(((-1.0)*x464))+x465)))+(IKabs(((1.468e-5)+(((-1.0)*x446*x451))+(((-0.492)*x438))+(((-1.0)*x435*x442))+(((-1.0)*r02*x437))+(((-1.0)*r02*x453))+((x443*x448))+((x443*x446))+(((-4.0)*px))+(((-4.44e-6)*x439))+(((0.492)*x440))+(((-1.0)*x441*x442))+(((-1.0)*x448*x451)))))+(IKabs(((1.468e-5)+(((-1.0)*x466))+x463)))+(IKabs(((-1.468e-5)+(((-1.0)*x466))+x463))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x467=(cj5*r21);
IkReal x468=((6.324)*sj4);
IkReal x469=(cj4*r22);
IkReal x470=(cj5*r20);
IkReal x471=(r20*sj5);
IkReal x472=((9.36e-6)*cj4);
IkReal x473=(r21*sj5);
IkReal x474=((3.12e-6)*cj4);
IkReal x475=(cj4*r02);
IkReal x476=(r22*sj4);
IkReal x477=((2.108)*sj4);
IkReal x478=((1.332e-5)*x475);
IkReal x479=((1.476)*x470);
IkReal x480=((4.44e-6)*x475);
IkReal x481=((0.492)*x470);
IkReal x482=(cj5*r01*sj4);
IkReal x483=(r00*sj4*sj5);
IkReal x484=((1.332e-5)*x483);
IkReal x485=(x467*x472);
IkReal x486=(x471*x472);
IkReal x487=((1.332e-5)*x482);
IkReal x488=((4.44e-6)*x482);
IkReal x489=((4.44e-6)*x483);
IkReal x490=(x471*x474);
IkReal x491=(x467*x474);
IkReal x492=((((9.36e-6)*x476))+(((12.0)*pz))+((x467*x468))+(((1.476)*x473))+((x468*x471))+(((6.324)*x469)));
IkReal x493=(((x471*x477))+(((3.12e-6)*x476))+(((4.0)*pz))+(((0.492)*x473))+((x467*x477))+(((2.108)*x469)));
IkReal x494=(x489+x488+x481+x480+x490+x491);
IkReal x495=(x485+x484+x487+x486+x478+x479);
op[0]=((2.0)+(((-1.0)*x493))+x494);
op[1]=-2.936e-5;
op[2]=((2.0)+(((-1.0)*x492))+x495);
op[3]=-5.872e-5;
op[4]=((-2.0)+(((-1.0)*x492))+x495);
op[5]=-2.936e-5;
op[6]=((-2.0)+(((-1.0)*x493))+x494);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x496=(cj4*r02);
IkReal x497=(r01*sj5);
IkReal x498=(cj5*r00);
IkReal x499=(cj4*r22);
IkReal x500=((9.36e-6)*cj4);
IkReal x501=(cj5*r01);
IkReal x502=(r02*sj4);
IkReal x503=(r00*sj5);
IkReal x504=((6.324)*sj4);
IkReal x505=((3.12e-6)*cj4);
IkReal x506=((2.108)*sj4);
IkReal x507=((0.492)*x498);
IkReal x508=((1.476)*x498);
IkReal x509=(r20*sj4*sj5);
IkReal x510=(cj5*r21*sj4);
IkReal x511=(x503*x505);
IkReal x512=(x500*x503);
IkReal x513=(x500*x501);
IkReal x514=(x501*x505);
IkReal x515=(x508+x513+x512);
IkReal x516=(x507+x514+x511);
IkReal x517=((((9.36e-6)*x502))+(((12.0)*px))+(((6.324)*x496))+(((1.332e-5)*x509))+(((1.476)*x497))+((x501*x504))+((x503*x504))+(((1.332e-5)*x499))+(((1.332e-5)*x510)));
IkReal x518=((((4.44e-6)*x509))+(((4.44e-6)*x499))+(((4.0)*px))+((x501*x506))+(((2.108)*x496))+((x503*x506))+(((4.44e-6)*x510))+(((3.12e-6)*x502))+(((0.492)*x497)));
j1evalpoly[0]=((-1.468e-5)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.468e-5)+x516+(((-1.0)*x518))))))+(((htj1*htj1)*(((-1.468e-5)+x515+(((-1.0)*x517))))))+(((4.0)*htj1))+x516+(((-1.0)*x518))+(((htj1*htj1*htj1*htj1)*(((1.468e-5)+x515+(((-1.0)*x517))))))+(((8.0)*(htj1*htj1*htj1)))+(((4.0)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x519=(cj4*r22);
IkReal x520=((1.0)*sj1);
IkReal x521=(cj5*sj4);
IkReal x522=(cj4*r02);
IkReal x523=(sj4*sj5);
if( IKabs((((r20*sj1*x523))+((cj1*r01*x521))+((cj1*x522))+((r21*sj1*x521))+((sj1*x519))+((cj1*r00*x523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x520*x521))+((cj1*r20*x523))+((cj1*r21*x521))+(((-1.0)*x520*x522))+((cj1*x519))+(((-1.0)*r00*x520*x523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x523))+((cj1*r01*x521))+((cj1*x522))+((r21*sj1*x521))+((sj1*x519))+((cj1*r00*x523))))+IKsqr(((((-1.0)*r01*x520*x521))+((cj1*r20*x523))+((cj1*r21*x521))+(((-1.0)*x520*x522))+((cj1*x519))+(((-1.0)*r00*x520*x523))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x523))+((cj1*r01*x521))+((cj1*x522))+((r21*sj1*x521))+((sj1*x519))+((cj1*r00*x523))), ((((-1.0)*r01*x520*x521))+((cj1*r20*x523))+((cj1*r21*x521))+(((-1.0)*x520*x522))+((cj1*x519))+(((-1.0)*r00*x520*x523))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x524=IKsin(j2);
IkReal x525=IKcos(j2);
IkReal x526=(r02*sj4);
IkReal x527=((1.0)*cj3);
IkReal x528=(cj3*cj4);
IkReal x529=(r00*sj5);
IkReal x530=(r22*sj4);
IkReal x531=((0.123)*sj5);
IkReal x532=(cj5*r00);
IkReal x533=(cj5*r21);
IkReal x534=(cj5*r20);
IkReal x535=((1.0)*sj5);
IkReal x536=((1.0)*cj4);
IkReal x537=((7.8e-7)*cj4);
IkReal x538=(cj5*r01);
IkReal x539=((1.0)*sj4);
IkReal x540=(r20*sj5);
IkReal x541=(cj1*x525);
IkReal x542=(sj1*x524);
IkReal x543=(sj1*x525);
IkReal x544=((0.527)*x524);
IkReal x545=(cj1*x524);
IkReal x546=(x541+x542);
evalcond[0]=((((-1.0)*r22*x536))+(((-1.0)*x533*x539))+x546+(((-1.0)*r20*sj4*x535)));
evalcond[1]=((((-1.0)*x543))+(((-1.0)*x538*x539))+(((-1.0)*x529*x539))+(((-1.0)*r02*x536))+x545);
evalcond[2]=((((-1.0)*x526*x527))+((sj3*x532))+x546+((x528*x538))+((x528*x529))+(((-1.0)*r01*sj3*x535)));
evalcond[3]=((((-1.0)*x545))+(((-1.0)*x527*x530))+((sj3*x534))+x543+(((-1.0)*r21*sj3*x535))+((x528*x533))+((x528*x540)));
evalcond[4]=((((-3.67e-6)*sj1))+(((-1.11e-6)*x543))+(((-1.0)*r21*x531))+(((1.11e-6)*x545))+(((0.123)*x534))+(((-1.0)*pz))+((x537*x540))+(((-0.527)*x542))+(((-0.527)*x541))+(((-7.8e-7)*x530))+(((-0.5)*cj1))+((x533*x537)));
evalcond[5]=((((-1.0)*cj1*x544))+(((-1.11e-6)*x542))+(((-1.11e-6)*x541))+(((0.5)*sj1))+(((-1.0)*r01*x531))+(((0.123)*x532))+((x537*x538))+(((-1.0)*px))+(((-3.67e-6)*cj1))+(((-7.8e-7)*x526))+(((0.527)*x543))+((x529*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x547=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x547;
j3eval[1]=((IKabs((((cj4*r00*sj5))+(((-1.0)*r02*sj4))+((cj4*cj5*r01)))))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j3eval[2]=IKsign(x547);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x548=((1.0)*sj4);
IkReal x549=((((-1.0)*cj4*r02))+(((-1.0)*cj5*r01*x548))+(((-1.0)*r00*sj5*x548)));
j3eval[0]=x549;
j3eval[1]=IKsign(x549);
j3eval[2]=((IKabs(((((-1.0)*r22*x548))+((cj4*r20*sj5))+((cj4*cj5*r21)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x550=cj4*cj4;
IkReal x551=r11*r11;
IkReal x552=cj5*cj5;
IkReal x553=r10*r10;
IkReal x554=r12*r12;
IkReal x555=(cj5*r11);
IkReal x556=((1.0)*x550);
IkReal x557=((2.0)*r10*sj5);
IkReal x558=(cj4*r12*sj4);
IkReal x559=(x552*x553);
IkReal x560=(x551*x552);
IkReal x561=((((-1.0)*x555*x557))+(((-1.0)*x556*x559))+((x550*x555*x557))+((x550*x560))+(((-1.0)*x554*x556))+x559+x551+x554+((x550*x553))+(((-1.0)*x560))+(((-1.0)*x557*x558))+(((-2.0)*x555*x558)));
j3eval[0]=x561;
j3eval[1]=IKsign(x561);
j3eval[2]=((IKabs((((cj4*x555))+((cj4*r10*sj5))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj5*r10))+((r11*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x562=cj4*cj4;
IkReal x563=r11*r11;
IkReal x564=cj5*cj5;
IkReal x565=r10*r10;
IkReal x566=r12*r12;
IkReal x567=(r12*sj4);
IkReal x568=(cj5*r11);
IkReal x569=((2.0)*r10*sj5);
IkReal x570=((1.0)*x562);
IkReal x571=(x564*x565);
IkReal x572=(x563*x564);
CheckValue<IkReal> x573=IKPowWithIntegerCheck(IKsign(((((-1.0)*x566*x570))+(((-1.0)*x570*x571))+((x562*x565))+((x562*x572))+(((-1.0)*x572))+(((-1.0)*cj4*x567*x569))+((x562*x568*x569))+x571+x566+x563+(((-1.0)*x568*x569))+(((-2.0)*cj4*x567*x568)))),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-1.0)*x567))+((cj4*r10*sj5))+((cj4*x568)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x573.value)))+(x574.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x575=IKcos(j3);
IkReal x576=IKsin(j3);
IkReal x577=((1.0)*cj4);
IkReal x578=(cj5*x575);
IkReal x579=(cj5*x576);
IkReal x580=((1.0)*r11*sj5);
IkReal x581=(sj4*x576);
IkReal x582=(sj5*x576);
IkReal x583=((1.0)*x575);
evalcond[0]=(((cj4*r10*sj5*x575))+((cj4*r11*x578))+(((-1.0)*r12*sj4*x583))+(((-1.0)*x576*x580))+((r10*x579)));
evalcond[1]=(((r20*x578))+(((-1.0)*r21*x577*x579))+((r22*x581))+(((-1.0)*r21*sj5*x583))+(((-1.0)*r20*x577*x582)));
evalcond[2]=(((r00*x578))+(((-1.0)*r00*x577*x582))+((r02*x581))+(((-1.0)*r01*x577*x579))+(((-1.0)*r01*sj5*x583)));
evalcond[3]=((1.0)+(((-1.0)*r10*x577*x582))+((r12*x581))+(((-1.0)*x575*x580))+((r10*x578))+(((-1.0)*r11*x577*x579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x584=((4.0)*pz);
IkReal x585=((12.0)*pz);
IkReal x586=((1.332e-5)*cj5);
IkReal x587=(r20*sj3);
IkReal x588=(cj5*r21);
IkReal x589=((6.324)*sj4);
IkReal x590=(cj4*r22);
IkReal x591=(cj3*cj4);
IkReal x592=(cj5*r20);
IkReal x593=(r20*sj5);
IkReal x594=((9.36e-6)*cj4);
IkReal x595=(r22*sj4);
IkReal x596=(r21*sj5);
IkReal x597=((3.12e-6)*cj4);
IkReal x598=((4.44e-6)*cj5);
IkReal x599=(cj4*r02);
IkReal x600=((2.108)*sj4);
IkReal x601=(r01*sj4);
IkReal x602=((0.492)*x596);
IkReal x603=((2.108)*x590);
IkReal x604=((3.12e-6)*x595);
IkReal x605=((0.492)*x592);
IkReal x606=((9.36e-6)*x595);
IkReal x607=((6.324)*x590);
IkReal x608=((1.476)*x596);
IkReal x609=((1.476)*x592);
IkReal x610=((1.332e-5)*x599);
IkReal x611=(sj3*x596);
IkReal x612=(r00*sj4*sj5);
IkReal x613=(x593*x600);
IkReal x614=(x588*x600);
IkReal x615=(x593*x597);
IkReal x616=(x588*x597);
IkReal x617=(x588*x589);
IkReal x618=((1.332e-5)*x611);
IkReal x619=(x589*x593);
IkReal x620=((1.332e-5)*cj3*x595);
IkReal x621=(x588*x594);
IkReal x622=(x593*x594);
IkReal x623=((1.332e-5)*x612);
IkReal x624=(x586*x601);
IkReal x625=(x618+x620);
IkReal x626=(x609+x621+x622);
IkReal x627=(x605+x615+x616);
IkReal x628=(x610+x624+x623);
IkReal x629=(x585+x607+x606+x608+x619+x617);
IkReal x630=((-2.0)+x584+x603+x602+x604+x614+x613);
IkReal x631=(((r21*x586*x591))+(((1.332e-5)*x591*x593))+((x586*x587))+x626);
j1eval[0]=((1.0)+(((4257.4931880109)*(IKabs(((-2.0)+(((-1.0)*x631))+x625+x629)))))+(((4257.4931880109)*(IKabs(((2.0)+(((-1.0)*x631))+x625+x629)))))+(((4257.4931880109)*(IKabs(((-2.0)+(((-1.0)*x626))+x629+x628)))))+(((4257.4931880109)*(IKabs(((((4.44e-6)*x612))+(((4.44e-6)*x599))+(((-1.0)*x627))+x630+((x598*x601)))))))+(((4257.4931880109)*(IKabs(((((4.44e-6)*x611))+(((-1.0)*x587*x598))+(((4.44e-6)*cj3*x595))+(((-1.0)*x627))+(((-4.44e-6)*x588*x591))+(((-4.44e-6)*x591*x593))+x630)))))+(((4257.4931880109)*(IKabs(((2.0)+(((-1.0)*x626))+x629+x628))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x632=((12.0)*pz);
IkReal x633=((4.0)*pz);
IkReal x634=(cj5*r21);
IkReal x635=((6.324)*sj4);
IkReal x636=(cj4*r22);
IkReal x637=(cj5*r20);
IkReal x638=(r20*sj5);
IkReal x639=((9.36e-6)*cj4);
IkReal x640=(r21*sj5);
IkReal x641=((3.12e-6)*cj4);
IkReal x642=(cj4*r02);
IkReal x643=(r22*sj4);
IkReal x644=((2.108)*sj4);
IkReal x645=((1.332e-5)*x642);
IkReal x646=((9.36e-6)*x643);
IkReal x647=((6.324)*x636);
IkReal x648=((1.476)*x640);
IkReal x649=((0.492)*x640);
IkReal x650=((4.44e-6)*x642);
IkReal x651=((2.108)*x636);
IkReal x652=((3.12e-6)*x643);
IkReal x653=(cj5*r01*sj4);
IkReal x654=(r00*sj4*sj5);
IkReal x655=((1.332e-5)*x654);
IkReal x656=(x634*x635);
IkReal x657=((1.332e-5)*x653);
IkReal x658=(x635*x638);
IkReal x659=((4.44e-6)*x653);
IkReal x660=((4.44e-6)*x654);
IkReal x661=(x638*x644);
IkReal x662=(x634*x644);
IkReal x663=((((1.476)*x637))+((x634*x639))+((x638*x639)));
IkReal x664=(((x638*x641))+(((0.492)*x637))+((x634*x641)));
IkReal x665=(x649+x650+x651+x652+x659+x661+x660+x662+x633);
IkReal x666=(x647+x646+x645+x648+x655+x656+x657+x658+x632);
op[0]=((-2.0)+(((-1.0)*x664))+x665);
op[1]=2.936e-5;
op[2]=((-2.0)+(((-1.0)*x663))+x666);
op[3]=5.872e-5;
op[4]=((2.0)+(((-1.0)*x663))+x666);
op[5]=2.936e-5;
op[6]=((2.0)+(((-1.0)*x664))+x665);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x667=((12.0)*pz);
IkReal x668=((4.0)*pz);
IkReal x669=((1.332e-5)*r20);
IkReal x670=(cj5*sj3);
IkReal x671=(cj5*r21);
IkReal x672=((6.324)*sj4);
IkReal x673=(cj3*cj4);
IkReal x674=(cj4*r22);
IkReal x675=((3.12e-6)*cj4);
IkReal x676=(r20*sj5);
IkReal x677=((9.36e-6)*cj4);
IkReal x678=(r21*sj5);
IkReal x679=(cj5*r20);
IkReal x680=(r22*sj4);
IkReal x681=((2.108)*sj4);
IkReal x682=((9.36e-6)*x680);
IkReal x683=((6.324)*x674);
IkReal x684=((1.476)*x678);
IkReal x685=((0.492)*x678);
IkReal x686=((2.108)*x674);
IkReal x687=((3.12e-6)*x680);
IkReal x688=(sj3*x678);
IkReal x689=(cj3*x680);
IkReal x690=(x671*x672);
IkReal x691=((1.332e-5)*x688);
IkReal x692=(x672*x676);
IkReal x693=((1.332e-5)*x689);
IkReal x694=(x676*x681);
IkReal x695=((4.44e-6)*x688);
IkReal x696=((4.44e-6)*x689);
IkReal x697=(x671*x681);
IkReal x698=(((x671*x677))+((sj5*x669*x673))+((x676*x677))+(((1.476)*x679))+((x669*x670))+(((1.332e-5)*x671*x673)));
IkReal x699=(((x671*x675))+(((4.44e-6)*x673*x676))+(((4.44e-6)*x671*x673))+(((0.492)*x679))+((x675*x676))+(((4.44e-6)*r20*x670)));
IkReal x700=(x668+x687+x686+x685+x694+x695+x696+x697);
IkReal x701=(x667+x683+x682+x684+x690+x691+x692+x693);
j1evalpoly[0]=((2.0)+(((5.872e-5)*(htj1*htj1*htj1)))+(((2.936e-5)*htj1))+(((htj1*htj1*htj1*htj1)*(((-2.0)+(((-1.0)*x698))+x701))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-2.0)+(((-1.0)*x699))+x700))))+(((-1.0)*x699))+x700+(((htj1*htj1)*(((2.0)+(((-1.0)*x698))+x701))))+(((2.936e-5)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x702=(cj4*sj1);
IkReal x703=(cj1*cj4);
IkReal x704=(cj5*sj4);
IkReal x705=((1.0)*cj1);
IkReal x706=(sj4*sj5);
IkReal x707=(sj1*x706);
if( IKabs((((r22*x702))+(((-1.0)*r01*x704*x705))+((r21*sj1*x704))+((r20*x707))+(((-1.0)*r00*x705*x706))+(((-1.0)*r02*x703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x703))+((r00*x707))+((cj1*r21*x704))+((r02*x702))+((r01*sj1*x704))+((cj1*r20*x706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x702))+(((-1.0)*r01*x704*x705))+((r21*sj1*x704))+((r20*x707))+(((-1.0)*r00*x705*x706))+(((-1.0)*r02*x703))))+IKsqr((((r22*x703))+((r00*x707))+((cj1*r21*x704))+((r02*x702))+((r01*sj1*x704))+((cj1*r20*x706))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x702))+(((-1.0)*r01*x704*x705))+((r21*sj1*x704))+((r20*x707))+(((-1.0)*r00*x705*x706))+(((-1.0)*r02*x703))), (((r22*x703))+((r00*x707))+((cj1*r21*x704))+((r02*x702))+((r01*sj1*x704))+((cj1*r20*x706))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x708=IKcos(j2);
IkReal x709=IKsin(j2);
IkReal x710=(r02*sj4);
IkReal x711=((1.0)*cj3);
IkReal x712=(r22*sj4);
IkReal x713=(r21*sj5);
IkReal x714=((0.123)*cj5);
IkReal x715=((1.0)*cj4);
IkReal x716=((1.0)*sj3);
IkReal x717=(cj5*sj3);
IkReal x718=(cj5*r01);
IkReal x719=((7.8e-7)*cj4);
IkReal x720=((1.0)*sj4);
IkReal x721=(r01*sj5);
IkReal x722=(sj1*x708);
IkReal x723=(cj1*x708);
IkReal x724=(cj3*cj4*sj5);
IkReal x725=(sj1*x709);
IkReal x726=(cj4*cj5*r21);
IkReal x727=(sj5*x720);
IkReal x728=(cj1*x709);
IkReal x729=((1.0)*x728);
evalcond[0]=((((-1.0)*r22*x715))+(((-1.0)*cj5*r21*x720))+x723+x725+(((-1.0)*r20*x727)));
evalcond[1]=((((-1.0)*r00*x727))+(((-1.0)*r02*x715))+(((-1.0)*x729))+x722+(((-1.0)*x718*x720)));
evalcond[2]=((((-1.0)*x711*x712))+((r20*x724))+(((-1.0)*x729))+((r20*x717))+((cj3*x726))+x722+(((-1.0)*x713*x716)));
evalcond[3]=(((cj3*cj4*x718))+(((-1.0)*x710*x711))+((r00*x717))+((r00*x724))+(((-1.0)*x723))+(((-1.0)*x725))+(((-1.0)*x716*x721)));
evalcond[4]=(((r20*sj5*x719))+(((-1.11e-6)*x722))+(((-0.123)*x713))+((cj5*r21*x719))+(((-3.67e-6)*sj1))+(((1.11e-6)*x728))+(((-0.527)*x725))+(((-0.527)*x723))+(((-1.0)*pz))+((r20*x714))+(((-0.5)*cj1))+(((-7.8e-7)*x712)));
evalcond[5]=((((3.67e-6)*cj1))+(((1.11e-6)*x725))+(((1.11e-6)*x723))+(((-0.527)*x722))+((r00*x714))+(((-0.123)*x721))+((r00*sj5*x719))+(((-1.0)*px))+(((0.527)*x728))+(((-0.5)*sj1))+((x718*x719))+(((-7.8e-7)*x710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x730=((1.0)*sj4);
CheckValue<IkReal> x731=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj5*x730))+(((-1.0)*cj5*r01*x730)))),-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal((((cj4*r20*sj5))+((cj4*cj5*r21))+(((-1.0)*r22*x730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x732.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x731.value)))+(x732.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x733=IKcos(j3);
IkReal x734=IKsin(j3);
IkReal x735=((1.0)*cj4);
IkReal x736=(cj5*x733);
IkReal x737=(cj5*x734);
IkReal x738=((1.0)*r11*sj5);
IkReal x739=(sj4*x734);
IkReal x740=(sj5*x734);
IkReal x741=((1.0)*x733);
evalcond[0]=(((r10*x737))+((cj4*r11*x736))+(((-1.0)*x734*x738))+(((-1.0)*r12*sj4*x741))+((cj4*r10*sj5*x733)));
evalcond[1]=((((-1.0)*r20*x735*x740))+(((-1.0)*r21*sj5*x741))+((r20*x736))+(((-1.0)*r21*x735*x737))+((r22*x739)));
evalcond[2]=(((r00*x736))+(((-1.0)*r01*sj5*x741))+((r02*x739))+(((-1.0)*r01*x735*x737))+(((-1.0)*r00*x735*x740)));
evalcond[3]=((1.0)+((r12*x739))+((r10*x736))+(((-1.0)*x733*x738))+(((-1.0)*r11*x735*x737))+(((-1.0)*r10*x735*x740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x742=((4.0)*pz);
IkReal x743=((12.0)*pz);
IkReal x744=((1.332e-5)*cj5);
IkReal x745=(r20*sj3);
IkReal x746=(cj5*r21);
IkReal x747=((6.324)*sj4);
IkReal x748=(cj4*r22);
IkReal x749=(cj3*cj4);
IkReal x750=(cj5*r20);
IkReal x751=(r20*sj5);
IkReal x752=((9.36e-6)*cj4);
IkReal x753=(r22*sj4);
IkReal x754=(r21*sj5);
IkReal x755=((3.12e-6)*cj4);
IkReal x756=((4.44e-6)*cj5);
IkReal x757=(cj4*r02);
IkReal x758=((2.108)*sj4);
IkReal x759=(r01*sj4);
IkReal x760=((0.492)*x754);
IkReal x761=((2.108)*x748);
IkReal x762=((3.12e-6)*x753);
IkReal x763=((0.492)*x750);
IkReal x764=((9.36e-6)*x753);
IkReal x765=((6.324)*x748);
IkReal x766=((1.476)*x754);
IkReal x767=((1.476)*x750);
IkReal x768=((1.332e-5)*x757);
IkReal x769=(sj3*x754);
IkReal x770=(r00*sj4*sj5);
IkReal x771=(x751*x758);
IkReal x772=(x746*x758);
IkReal x773=(x751*x755);
IkReal x774=(x746*x755);
IkReal x775=(x746*x747);
IkReal x776=((1.332e-5)*x769);
IkReal x777=(x747*x751);
IkReal x778=((1.332e-5)*cj3*x753);
IkReal x779=(x746*x752);
IkReal x780=(x751*x752);
IkReal x781=((1.332e-5)*x770);
IkReal x782=(x744*x759);
IkReal x783=(x776+x778);
IkReal x784=(x779+x767+x780);
IkReal x785=(x773+x774+x763);
IkReal x786=(x768+x782+x781);
IkReal x787=(x743+x777+x775+x764+x765+x766);
IkReal x788=((-2.0)+x742+x772+x771+x760+x761+x762);
IkReal x789=(((x744*x745))+x784+(((1.332e-5)*x749*x751))+((r21*x744*x749)));
j1eval[0]=((1.0)+(((4257.4931880109)*(IKabs(((2.0)+(((-1.0)*x784))+x786+x787)))))+(((4257.4931880109)*(IKabs(((2.0)+(((-1.0)*x789))+x783+x787)))))+(((4257.4931880109)*(IKabs(((-2.0)+(((-1.0)*x784))+x786+x787)))))+(((4257.4931880109)*(IKabs(((((-4.44e-6)*x749*x751))+(((-1.0)*x745*x756))+(((-1.0)*x785))+(((4.44e-6)*x769))+(((4.44e-6)*cj3*x753))+(((-4.44e-6)*x746*x749))+x788)))))+(((4257.4931880109)*(IKabs(((-2.0)+(((-1.0)*x789))+x783+x787)))))+(((4257.4931880109)*(IKabs((((x756*x759))+(((-1.0)*x785))+(((4.44e-6)*x770))+(((4.44e-6)*x757))+x788))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x790=((12.0)*pz);
IkReal x791=((4.0)*pz);
IkReal x792=(cj5*r21);
IkReal x793=((6.324)*sj4);
IkReal x794=(cj4*r22);
IkReal x795=(cj5*r20);
IkReal x796=(r20*sj5);
IkReal x797=((9.36e-6)*cj4);
IkReal x798=(r21*sj5);
IkReal x799=((3.12e-6)*cj4);
IkReal x800=(cj4*r02);
IkReal x801=(r22*sj4);
IkReal x802=((2.108)*sj4);
IkReal x803=((1.332e-5)*x800);
IkReal x804=((9.36e-6)*x801);
IkReal x805=((6.324)*x794);
IkReal x806=((1.476)*x798);
IkReal x807=((0.492)*x798);
IkReal x808=((4.44e-6)*x800);
IkReal x809=((2.108)*x794);
IkReal x810=((3.12e-6)*x801);
IkReal x811=(cj5*r01*sj4);
IkReal x812=(r00*sj4*sj5);
IkReal x813=((1.332e-5)*x812);
IkReal x814=(x792*x793);
IkReal x815=((1.332e-5)*x811);
IkReal x816=(x793*x796);
IkReal x817=((4.44e-6)*x811);
IkReal x818=((4.44e-6)*x812);
IkReal x819=(x796*x802);
IkReal x820=(x792*x802);
IkReal x821=(((x796*x797))+(((1.476)*x795))+((x792*x797)));
IkReal x822=(((x796*x799))+((x792*x799))+(((0.492)*x795)));
IkReal x823=(x791+x818+x819+x817+x810+x820+x809+x808+x807);
IkReal x824=(x790+x816+x814+x815+x813+x805+x804+x806+x803);
op[0]=((-2.0)+(((-1.0)*x822))+x823);
op[1]=2.936e-5;
op[2]=((-2.0)+(((-1.0)*x821))+x824);
op[3]=5.872e-5;
op[4]=((2.0)+(((-1.0)*x821))+x824);
op[5]=2.936e-5;
op[6]=((2.0)+(((-1.0)*x822))+x823);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x825=((12.0)*pz);
IkReal x826=((4.0)*pz);
IkReal x827=((1.332e-5)*r20);
IkReal x828=(cj5*sj3);
IkReal x829=(cj5*r21);
IkReal x830=((6.324)*sj4);
IkReal x831=(cj3*cj4);
IkReal x832=(cj4*r22);
IkReal x833=((3.12e-6)*cj4);
IkReal x834=(r20*sj5);
IkReal x835=((9.36e-6)*cj4);
IkReal x836=(r21*sj5);
IkReal x837=(cj5*r20);
IkReal x838=(r22*sj4);
IkReal x839=((2.108)*sj4);
IkReal x840=((9.36e-6)*x838);
IkReal x841=((6.324)*x832);
IkReal x842=((1.476)*x836);
IkReal x843=((0.492)*x836);
IkReal x844=((2.108)*x832);
IkReal x845=((3.12e-6)*x838);
IkReal x846=(sj3*x836);
IkReal x847=(cj3*x838);
IkReal x848=(x829*x830);
IkReal x849=((1.332e-5)*x846);
IkReal x850=(x830*x834);
IkReal x851=((1.332e-5)*x847);
IkReal x852=(x834*x839);
IkReal x853=((4.44e-6)*x846);
IkReal x854=((4.44e-6)*x847);
IkReal x855=(x829*x839);
IkReal x856=((((1.332e-5)*x829*x831))+(((1.476)*x837))+((x829*x835))+((x834*x835))+((sj5*x827*x831))+((x827*x828)));
IkReal x857=((((0.492)*x837))+(((4.44e-6)*x831*x834))+(((4.44e-6)*r20*x828))+((x833*x834))+(((4.44e-6)*x829*x831))+((x829*x833)));
IkReal x858=(x852+x853+x854+x855+x826+x843+x845+x844);
IkReal x859=(x850+x851+x825+x841+x840+x842+x849+x848);
j1evalpoly[0]=((2.0)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-2.0)+(((-1.0)*x857))+x858))))+(((5.872e-5)*(htj1*htj1*htj1)))+(((-1.0)*x857))+(((htj1*htj1*htj1*htj1)*(((-2.0)+(((-1.0)*x856))+x859))))+(((2.936e-5)*htj1))+(((htj1*htj1)*(((2.0)+(((-1.0)*x856))+x859))))+x858+(((2.936e-5)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x860=(cj4*sj1);
IkReal x861=(cj1*cj4);
IkReal x862=(cj5*sj4);
IkReal x863=((1.0)*cj1);
IkReal x864=(sj4*sj5);
IkReal x865=(sj1*x864);
if( IKabs((((r21*sj1*x862))+(((-1.0)*r00*x863*x864))+((r22*x860))+(((-1.0)*r01*x862*x863))+(((-1.0)*r02*x861))+((r20*x865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x862))+((r00*x865))+((r22*x861))+((cj1*r20*x864))+((cj1*r21*x862))+((r02*x860)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x862))+(((-1.0)*r00*x863*x864))+((r22*x860))+(((-1.0)*r01*x862*x863))+(((-1.0)*r02*x861))+((r20*x865))))+IKsqr((((r01*sj1*x862))+((r00*x865))+((r22*x861))+((cj1*r20*x864))+((cj1*r21*x862))+((r02*x860))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x862))+(((-1.0)*r00*x863*x864))+((r22*x860))+(((-1.0)*r01*x862*x863))+(((-1.0)*r02*x861))+((r20*x865))), (((r01*sj1*x862))+((r00*x865))+((r22*x861))+((cj1*r20*x864))+((cj1*r21*x862))+((r02*x860))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x866=IKcos(j2);
IkReal x867=IKsin(j2);
IkReal x868=(r02*sj4);
IkReal x869=((1.0)*cj3);
IkReal x870=(r22*sj4);
IkReal x871=(r21*sj5);
IkReal x872=((0.123)*cj5);
IkReal x873=((1.0)*cj4);
IkReal x874=((1.0)*sj3);
IkReal x875=(cj5*sj3);
IkReal x876=(cj5*r01);
IkReal x877=((7.8e-7)*cj4);
IkReal x878=((1.0)*sj4);
IkReal x879=(r01*sj5);
IkReal x880=(sj1*x866);
IkReal x881=(cj1*x866);
IkReal x882=(cj3*cj4*sj5);
IkReal x883=(sj1*x867);
IkReal x884=(cj4*cj5*r21);
IkReal x885=(sj5*x878);
IkReal x886=(cj1*x867);
IkReal x887=((1.0)*x886);
evalcond[0]=((((-1.0)*cj5*r21*x878))+x881+x883+(((-1.0)*r20*x885))+(((-1.0)*r22*x873)));
evalcond[1]=((((-1.0)*x876*x878))+(((-1.0)*x887))+(((-1.0)*r02*x873))+x880+(((-1.0)*r00*x885)));
evalcond[2]=(((cj3*x884))+(((-1.0)*x871*x874))+((r20*x882))+(((-1.0)*x869*x870))+(((-1.0)*x887))+x880+((r20*x875)));
evalcond[3]=(((r00*x875))+((r00*x882))+((cj3*cj4*x876))+(((-1.0)*x868*x869))+(((-1.0)*x881))+(((-1.0)*x883))+(((-1.0)*x874*x879)));
evalcond[4]=((((-7.8e-7)*x870))+(((1.11e-6)*x886))+(((-3.67e-6)*sj1))+((r20*sj5*x877))+(((-0.527)*x883))+(((-0.527)*x881))+(((-1.11e-6)*x880))+(((-1.0)*pz))+(((-0.5)*cj1))+((r20*x872))+(((-0.123)*x871))+((cj5*r21*x877)));
evalcond[5]=((((1.11e-6)*x883))+(((1.11e-6)*x881))+((x876*x877))+(((-7.8e-7)*x868))+((r00*sj5*x877))+((r00*x872))+(((3.67e-6)*cj1))+(((-0.527)*x880))+(((-1.0)*px))+(((0.527)*x886))+(((-0.5)*sj1))+(((-0.123)*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x888 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal((((cj4*r00*sj5))+(((-1.0)*r02*sj4))+((cj4*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x888.valid){
continue;
}
CheckValue<IkReal> x889=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x889.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x888.value)+(((1.5707963267949)*(x889.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x890=IKcos(j3);
IkReal x891=IKsin(j3);
IkReal x892=((1.0)*cj4);
IkReal x893=(cj5*x890);
IkReal x894=(cj5*x891);
IkReal x895=((1.0)*r11*sj5);
IkReal x896=(sj4*x891);
IkReal x897=(sj5*x891);
IkReal x898=((1.0)*x890);
evalcond[0]=(((cj4*r10*sj5*x890))+(((-1.0)*r12*sj4*x898))+((r10*x894))+((cj4*r11*x893))+(((-1.0)*x891*x895)));
evalcond[1]=((((-1.0)*r21*sj5*x898))+((r20*x893))+(((-1.0)*r21*x892*x894))+(((-1.0)*r20*x892*x897))+((r22*x896)));
evalcond[2]=(((r02*x896))+(((-1.0)*r00*x892*x897))+(((-1.0)*r01*x892*x894))+(((-1.0)*r01*sj5*x898))+((r00*x893)));
evalcond[3]=((1.0)+((r10*x893))+(((-1.0)*r10*x892*x897))+(((-1.0)*r11*x892*x894))+((r12*x896))+(((-1.0)*x890*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x899=((4.0)*pz);
IkReal x900=((12.0)*pz);
IkReal x901=((1.332e-5)*cj5);
IkReal x902=(r20*sj3);
IkReal x903=(cj5*r21);
IkReal x904=((6.324)*sj4);
IkReal x905=(cj4*r22);
IkReal x906=(cj3*cj4);
IkReal x907=(cj5*r20);
IkReal x908=(r20*sj5);
IkReal x909=((9.36e-6)*cj4);
IkReal x910=(r22*sj4);
IkReal x911=(r21*sj5);
IkReal x912=((3.12e-6)*cj4);
IkReal x913=((4.44e-6)*cj5);
IkReal x914=(cj4*r02);
IkReal x915=((2.108)*sj4);
IkReal x916=(r01*sj4);
IkReal x917=((0.492)*x911);
IkReal x918=((2.108)*x905);
IkReal x919=((3.12e-6)*x910);
IkReal x920=((0.492)*x907);
IkReal x921=((9.36e-6)*x910);
IkReal x922=((6.324)*x905);
IkReal x923=((1.476)*x911);
IkReal x924=((1.476)*x907);
IkReal x925=((1.332e-5)*x914);
IkReal x926=(sj3*x911);
IkReal x927=(r00*sj4*sj5);
IkReal x928=(x908*x915);
IkReal x929=(x903*x915);
IkReal x930=(x908*x912);
IkReal x931=(x903*x912);
IkReal x932=(x903*x904);
IkReal x933=((1.332e-5)*x926);
IkReal x934=(x904*x908);
IkReal x935=((1.332e-5)*cj3*x910);
IkReal x936=(x903*x909);
IkReal x937=(x908*x909);
IkReal x938=((1.332e-5)*x927);
IkReal x939=(x901*x916);
IkReal x940=(x935+x933);
IkReal x941=(x937+x936+x924);
IkReal x942=(x931+x930+x920);
IkReal x943=(x939+x938+x925);
IkReal x944=(x934+x932+x922+x923+x921+x900);
IkReal x945=((-2.0)+x899+x928+x929+x919+x918+x917);
IkReal x946=(((x901*x902))+(((1.332e-5)*x906*x908))+x941+((r21*x901*x906)));
j1eval[0]=((1.0)+(((4257.4931880109)*(IKabs(((-2.0)+(((-1.0)*x941))+x943+x944)))))+(((4257.4931880109)*(IKabs(((2.0)+(((-1.0)*x946))+x940+x944)))))+(((4257.4931880109)*(IKabs(((2.0)+(((-1.0)*x941))+x943+x944)))))+(((4257.4931880109)*(IKabs(((-2.0)+(((-1.0)*x946))+x940+x944)))))+(((4257.4931880109)*(IKabs(((((-1.0)*x942))+(((4.44e-6)*x927))+((x913*x916))+x945+(((4.44e-6)*x914)))))))+(((4257.4931880109)*(IKabs(((((-1.0)*x942))+(((4.44e-6)*x926))+(((-4.44e-6)*x903*x906))+(((-1.0)*x902*x913))+(((-4.44e-6)*x906*x908))+(((4.44e-6)*cj3*x910))+x945))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x947=((12.0)*pz);
IkReal x948=((4.0)*pz);
IkReal x949=(cj5*r21);
IkReal x950=((6.324)*sj4);
IkReal x951=(cj4*r22);
IkReal x952=(cj5*r20);
IkReal x953=(r20*sj5);
IkReal x954=((9.36e-6)*cj4);
IkReal x955=(r21*sj5);
IkReal x956=((3.12e-6)*cj4);
IkReal x957=(cj4*r02);
IkReal x958=(r22*sj4);
IkReal x959=((2.108)*sj4);
IkReal x960=((1.332e-5)*x957);
IkReal x961=((9.36e-6)*x958);
IkReal x962=((6.324)*x951);
IkReal x963=((1.476)*x955);
IkReal x964=((0.492)*x955);
IkReal x965=((4.44e-6)*x957);
IkReal x966=((2.108)*x951);
IkReal x967=((3.12e-6)*x958);
IkReal x968=(cj5*r01*sj4);
IkReal x969=(r00*sj4*sj5);
IkReal x970=((1.332e-5)*x969);
IkReal x971=(x949*x950);
IkReal x972=((1.332e-5)*x968);
IkReal x973=(x950*x953);
IkReal x974=((4.44e-6)*x968);
IkReal x975=((4.44e-6)*x969);
IkReal x976=(x953*x959);
IkReal x977=(x949*x959);
IkReal x978=(((x949*x954))+(((1.476)*x952))+((x953*x954)));
IkReal x979=((((0.492)*x952))+((x949*x956))+((x953*x956)));
IkReal x980=(x975+x974+x977+x976+x966+x967+x964+x965+x948);
IkReal x981=(x971+x970+x973+x972+x962+x963+x960+x961+x947);
op[0]=((-2.0)+x980+(((-1.0)*x979)));
op[1]=2.936e-5;
op[2]=((-2.0)+x981+(((-1.0)*x978)));
op[3]=5.872e-5;
op[4]=((2.0)+x981+(((-1.0)*x978)));
op[5]=2.936e-5;
op[6]=((2.0)+x980+(((-1.0)*x979)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x982=((12.0)*pz);
IkReal x983=((4.0)*pz);
IkReal x984=((1.332e-5)*r20);
IkReal x985=(cj5*sj3);
IkReal x986=(cj5*r21);
IkReal x987=((6.324)*sj4);
IkReal x988=(cj3*cj4);
IkReal x989=(cj4*r22);
IkReal x990=((3.12e-6)*cj4);
IkReal x991=(r20*sj5);
IkReal x992=((9.36e-6)*cj4);
IkReal x993=(r21*sj5);
IkReal x994=(cj5*r20);
IkReal x995=(r22*sj4);
IkReal x996=((2.108)*sj4);
IkReal x997=((9.36e-6)*x995);
IkReal x998=((6.324)*x989);
IkReal x999=((1.476)*x993);
IkReal x1000=((0.492)*x993);
IkReal x1001=((2.108)*x989);
IkReal x1002=((3.12e-6)*x995);
IkReal x1003=(sj3*x993);
IkReal x1004=(cj3*x995);
IkReal x1005=(x986*x987);
IkReal x1006=((1.332e-5)*x1003);
IkReal x1007=(x987*x991);
IkReal x1008=((1.332e-5)*x1004);
IkReal x1009=(x991*x996);
IkReal x1010=((4.44e-6)*x1003);
IkReal x1011=((4.44e-6)*x1004);
IkReal x1012=(x986*x996);
IkReal x1013=((((1.476)*x994))+((x991*x992))+((x986*x992))+((sj5*x984*x988))+(((1.332e-5)*x986*x988))+((x984*x985)));
IkReal x1014=(((x986*x990))+((x990*x991))+(((4.44e-6)*x986*x988))+(((4.44e-6)*x988*x991))+(((4.44e-6)*r20*x985))+(((0.492)*x994)));
IkReal x1015=(x1010+x1011+x1012+x1009+x1002+x1001+x1000+x983);
IkReal x1016=(x1008+x1007+x1006+x1005+x997+x999+x998+x982);
j1evalpoly[0]=((2.0)+(((5.872e-5)*(htj1*htj1*htj1)))+x1015+(((-1.0)*x1014))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-2.0)+x1015+(((-1.0)*x1014))))))+(((2.936e-5)*htj1))+(((htj1*htj1)*(((2.0)+x1016+(((-1.0)*x1013))))))+(((htj1*htj1*htj1*htj1)*(((-2.0)+x1016+(((-1.0)*x1013))))))+(((2.936e-5)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1017=(cj4*sj1);
IkReal x1018=(cj1*cj4);
IkReal x1019=(cj5*sj4);
IkReal x1020=((1.0)*cj1);
IkReal x1021=(sj4*sj5);
IkReal x1022=(sj1*x1021);
if( IKabs((((r20*x1022))+((r21*sj1*x1019))+((r22*x1017))+(((-1.0)*r00*x1020*x1021))+(((-1.0)*r02*x1018))+(((-1.0)*r01*x1019*x1020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1018))+((r01*sj1*x1019))+((r02*x1017))+((cj1*r21*x1019))+((cj1*r20*x1021))+((r00*x1022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1022))+((r21*sj1*x1019))+((r22*x1017))+(((-1.0)*r00*x1020*x1021))+(((-1.0)*r02*x1018))+(((-1.0)*r01*x1019*x1020))))+IKsqr((((r22*x1018))+((r01*sj1*x1019))+((r02*x1017))+((cj1*r21*x1019))+((cj1*r20*x1021))+((r00*x1022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1022))+((r21*sj1*x1019))+((r22*x1017))+(((-1.0)*r00*x1020*x1021))+(((-1.0)*r02*x1018))+(((-1.0)*r01*x1019*x1020))), (((r22*x1018))+((r01*sj1*x1019))+((r02*x1017))+((cj1*r21*x1019))+((cj1*r20*x1021))+((r00*x1022))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1023=IKcos(j2);
IkReal x1024=IKsin(j2);
IkReal x1025=(r02*sj4);
IkReal x1026=((1.0)*cj3);
IkReal x1027=(r22*sj4);
IkReal x1028=(r21*sj5);
IkReal x1029=((0.123)*cj5);
IkReal x1030=((1.0)*cj4);
IkReal x1031=((1.0)*sj3);
IkReal x1032=(cj5*sj3);
IkReal x1033=(cj5*r01);
IkReal x1034=((7.8e-7)*cj4);
IkReal x1035=((1.0)*sj4);
IkReal x1036=(r01*sj5);
IkReal x1037=(sj1*x1023);
IkReal x1038=(cj1*x1023);
IkReal x1039=(cj3*cj4*sj5);
IkReal x1040=(sj1*x1024);
IkReal x1041=(cj4*cj5*r21);
IkReal x1042=(sj5*x1035);
IkReal x1043=(cj1*x1024);
IkReal x1044=((1.0)*x1043);
evalcond[0]=(x1040+x1038+(((-1.0)*cj5*r21*x1035))+(((-1.0)*r22*x1030))+(((-1.0)*r20*x1042)));
evalcond[1]=((((-1.0)*x1033*x1035))+(((-1.0)*r00*x1042))+x1037+(((-1.0)*r02*x1030))+(((-1.0)*x1044)));
evalcond[2]=((((-1.0)*x1028*x1031))+x1037+(((-1.0)*x1026*x1027))+((cj3*x1041))+((r20*x1032))+((r20*x1039))+(((-1.0)*x1044)));
evalcond[3]=(((r00*x1032))+((r00*x1039))+(((-1.0)*x1038))+(((-1.0)*x1031*x1036))+((cj3*cj4*x1033))+(((-1.0)*x1040))+(((-1.0)*x1025*x1026)));
evalcond[4]=((((-7.8e-7)*x1027))+((r20*x1029))+(((-1.11e-6)*x1037))+(((-3.67e-6)*sj1))+(((-0.123)*x1028))+(((-0.527)*x1040))+((r20*sj5*x1034))+(((-1.0)*pz))+((cj5*r21*x1034))+(((-0.527)*x1038))+(((-0.5)*cj1))+(((1.11e-6)*x1043)));
evalcond[5]=((((-7.8e-7)*x1025))+(((3.67e-6)*cj1))+((r00*sj5*x1034))+(((1.11e-6)*x1038))+(((-1.0)*px))+(((-0.123)*x1036))+(((0.527)*x1043))+(((-0.527)*x1037))+((x1033*x1034))+(((-0.5)*sj1))+(((1.11e-6)*x1040))+((r00*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1045=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x1045;
j3eval[1]=((IKabs((((cj4*cj5*r11))+((cj4*r10*sj5))+(((-1.0)*r12*sj4)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j3eval[2]=IKsign(x1045);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1046=((1.0)*sj5);
IkReal x1047=((1.0)*sj4);
IkReal x1048=((((-1.0)*r10*sj4*x1046))+(((-1.0)*cj4*r12))+(((-1.0)*cj5*r11*x1047)));
j3eval[0]=x1048;
j3eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x1046)))))+(IKabs((((cj4*r20*sj5))+(((-1.0)*r22*x1047))+((cj4*cj5*r21))))));
j3eval[2]=IKsign(x1048);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1049=cj5*cj5;
IkReal x1050=cj4*cj4;
IkReal x1051=r00*r00;
IkReal x1052=r01*r01;
IkReal x1053=r02*r02;
IkReal x1054=(r00*sj5);
IkReal x1055=(r02*sj4);
IkReal x1056=((2.0)*cj5*r01);
IkReal x1057=((1.0)*x1052);
IkReal x1058=(x1049*x1051);
IkReal x1059=((((-1.0)*x1057))+((cj4*x1055*x1056))+((x1054*x1056))+(((-1.0)*x1049*x1050*x1057))+(((2.0)*cj4*x1054*x1055))+((x1050*x1058))+((x1050*x1053))+(((-1.0)*x1050*x1054*x1056))+(((-1.0)*x1053))+(((-1.0)*x1058))+((x1049*x1052))+(((-1.0)*x1050*x1051)));
j3eval[0]=x1059;
j3eval[1]=((IKabs((((cj4*cj5*r01))+(((-1.0)*x1055))+((cj4*x1054)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x1059);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1060=cj5*cj5;
IkReal x1061=cj4*cj4;
IkReal x1062=r00*r00;
IkReal x1063=r01*r01;
IkReal x1064=r02*r02;
IkReal x1065=(r00*sj5);
IkReal x1066=(r02*sj4);
IkReal x1067=((2.0)*cj5*r01);
IkReal x1068=((1.0)*x1062);
IkReal x1069=((1.0)*x1063);
IkReal x1070=(x1060*x1061);
CheckValue<IkReal> x1071 = IKatan2WithCheck(IkReal((((cj4*cj5*r01))+((cj4*x1065))+(((-1.0)*x1066)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1071.valid){
continue;
}
CheckValue<IkReal> x1072=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1060*x1068))+((x1061*x1064))+((x1060*x1063))+(((2.0)*cj4*x1065*x1066))+((cj4*x1066*x1067))+((x1062*x1070))+(((-1.0)*x1061*x1068))+(((-1.0)*x1061*x1065*x1067))+(((-1.0)*x1069))+(((-1.0)*x1069*x1070))+(((-1.0)*x1064))+((x1065*x1067)))),-1);
if(!x1072.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1071.value)+(((1.5707963267949)*(x1072.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1073=IKcos(j3);
IkReal x1074=IKsin(j3);
IkReal x1075=(r02*sj4);
IkReal x1076=(r01*sj5);
IkReal x1077=(cj4*cj5);
IkReal x1078=(cj4*sj5);
IkReal x1079=(cj5*x1073);
IkReal x1080=((1.0)*x1073);
IkReal x1081=((1.0)*x1074);
IkReal x1082=(sj4*x1074);
evalcond[0]=(((cj5*r00*x1074))+(((-1.0)*x1076*x1081))+((r00*x1073*x1078))+((r01*x1073*x1077))+(((-1.0)*x1075*x1080)));
evalcond[1]=((((-1.0)*r21*x1077*x1081))+((r20*x1079))+(((-1.0)*r21*sj5*x1080))+((r22*x1082))+(((-1.0)*r20*x1078*x1081)));
evalcond[2]=((((-1.0)*r11*sj5*x1080))+(((-1.0)*r11*x1077*x1081))+((r12*x1082))+(((-1.0)*r10*x1078*x1081))+((r10*x1079)));
evalcond[3]=((-1.0)+((x1074*x1075))+(((-1.0)*r01*x1077*x1081))+(((-1.0)*r00*x1078*x1081))+(((-1.0)*x1076*x1080))+((r00*x1079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1083=((12.0)*py);
IkReal x1084=((12.0)*pz);
IkReal x1085=((2.108)*cj4);
IkReal x1086=(cj4*r22);
IkReal x1087=(cj5*sj4);
IkReal x1088=((9.36e-6)*cj4);
IkReal x1089=(r10*sj5);
IkReal x1090=((9.36e-6)*sj4);
IkReal x1091=(cj5*r11);
IkReal x1092=((3.12e-6)*cj4);
IkReal x1093=(cj5*r21);
IkReal x1094=(cj5*r20);
IkReal x1095=(r21*sj5);
IkReal x1096=(r20*sj5);
IkReal x1097=(cj5*r10);
IkReal x1098=(cj4*r12);
IkReal x1099=((3.12e-6)*sj4);
IkReal x1100=(r11*sj5);
IkReal x1101=(r12*x1090);
IkReal x1102=((6.324)*x1098);
IkReal x1103=((1.476)*x1100);
IkReal x1104=(r22*x1090);
IkReal x1105=((1.332e-5)*x1098);
IkReal x1106=((6.324)*x1086);
IkReal x1107=((1.476)*x1095);
IkReal x1108=(sj4*x1096);
IkReal x1109=((6.324)*r11*x1087);
IkReal x1110=((6.324)*sj4*x1089);
IkReal x1111=((6.324)*r21*x1087);
IkReal x1112=((1.332e-5)*r11*x1087);
IkReal x1113=((6.324)*x1108);
IkReal x1114=((1.332e-5)*sj4*x1089);
IkReal x1115=((((1.476)*x1094))+((x1088*x1096))+((x1088*x1093)));
IkReal x1116=(x1102+x1103+x1101+x1109+x1110+x1083);
IkReal x1117=((((1.476)*x1097))+(((1.332e-5)*r21*x1087))+(((1.332e-5)*x1108))+((x1088*x1091))+(((1.332e-5)*x1086))+((x1088*x1089)));
IkReal x1118=(x1106+x1107+x1104+x1105+x1111+x1113+x1112+x1114+x1084);
j1eval[0]=((16.00011744)+(IKabs(((1.468e-5)+x1116+(((-1.0)*x1117)))))+(IKabs(((-2.0)+x1118+(((-1.0)*x1115)))))+(IKabs(((-1.468e-5)+x1116+(((-1.0)*x1117)))))+(IKabs(((1.468e-5)+(((-4.44e-6)*r21*x1087))+(((-1.0)*x1091*x1092))+(((4.0)*py))+((r12*x1085))+(((-0.492)*x1097))+(((2.108)*r11*x1087))+(((-1.0)*x1089*x1092))+(((2.108)*sj4*x1089))+((r12*x1099))+(((0.492)*x1100))+(((-4.44e-6)*x1108))+(((-4.44e-6)*x1086)))))+(IKabs(((-2.0)+(((4.0)*pz))+(((-0.492)*x1094))+((r22*x1099))+(((4.44e-6)*x1098))+(((2.108)*r21*x1087))+(((0.492)*x1095))+(((2.108)*x1108))+((r22*x1085))+(((-1.0)*x1092*x1093))+(((-1.0)*x1092*x1096))+(((4.44e-6)*r11*x1087))+(((4.44e-6)*sj4*x1089)))))+(IKabs(((2.0)+x1118+(((-1.0)*x1115))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1119=((12.0)*pz);
IkReal x1120=((4.0)*pz);
IkReal x1121=(cj5*sj4);
IkReal x1122=(cj4*r22);
IkReal x1123=(cj5*r20);
IkReal x1124=(r20*sj5);
IkReal x1125=((9.36e-6)*cj4);
IkReal x1126=(r21*sj5);
IkReal x1127=(cj5*r21);
IkReal x1128=((3.12e-6)*cj4);
IkReal x1129=(r22*sj4);
IkReal x1130=(cj4*r12);
IkReal x1131=((9.36e-6)*x1129);
IkReal x1132=((1.332e-5)*x1130);
IkReal x1133=((6.324)*x1122);
IkReal x1134=((1.476)*x1126);
IkReal x1135=((0.492)*x1126);
IkReal x1136=((4.44e-6)*x1130);
IkReal x1137=((2.108)*x1122);
IkReal x1138=((3.12e-6)*x1129);
IkReal x1139=(r10*sj4*sj5);
IkReal x1140=((6.324)*r21*x1121);
IkReal x1141=((1.332e-5)*r11*x1121);
IkReal x1142=((6.324)*sj4*x1124);
IkReal x1143=((1.332e-5)*x1139);
IkReal x1144=((2.108)*sj4*x1124);
IkReal x1145=((4.44e-6)*x1139);
IkReal x1146=((4.44e-6)*r11*x1121);
IkReal x1147=((2.108)*r21*x1121);
IkReal x1148=((((1.476)*x1123))+((x1125*x1127))+((x1124*x1125)));
IkReal x1149=(((x1127*x1128))+((x1124*x1128))+(((0.492)*x1123)));
IkReal x1150=(x1119+x1142+x1143+x1140+x1141+x1133+x1132+x1131+x1134);
IkReal x1151=(x1146+x1147+x1144+x1145+x1120+x1138+x1137+x1136+x1135);
op[0]=((-2.0)+x1151+(((-1.0)*x1149)));
op[1]=2.936e-5;
op[2]=((-2.0)+x1150+(((-1.0)*x1148)));
op[3]=5.872e-5;
op[4]=((2.0)+x1150+(((-1.0)*x1148)));
op[5]=2.936e-5;
op[6]=((2.0)+x1151+(((-1.0)*x1149)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1152=((4.0)*py);
IkReal x1153=((12.0)*py);
IkReal x1154=(cj4*r12);
IkReal x1155=(sj4*sj5);
IkReal x1156=((9.36e-6)*cj4);
IkReal x1157=(r10*sj5);
IkReal x1158=(r12*sj4);
IkReal x1159=(cj5*r11);
IkReal x1160=(cj4*r22);
IkReal x1161=((3.12e-6)*cj4);
IkReal x1162=(cj5*r10);
IkReal x1163=(r11*sj5);
IkReal x1164=((2.108)*x1154);
IkReal x1165=((0.492)*x1163);
IkReal x1166=((3.12e-6)*x1158);
IkReal x1167=((9.36e-6)*x1158);
IkReal x1168=((6.324)*x1154);
IkReal x1169=((1.476)*x1163);
IkReal x1170=(cj5*r21*sj4);
IkReal x1171=((2.108)*r10*x1155);
IkReal x1172=((2.108)*sj4*x1159);
IkReal x1173=((6.324)*sj4*x1159);
IkReal x1174=((6.324)*r10*x1155);
IkReal x1175=(x1153+x1167+x1168+x1169+x1174+x1173);
IkReal x1176=(x1152+x1164+x1165+x1166+x1172+x1171);
IkReal x1177=((((1.332e-5)*x1170))+(((1.332e-5)*x1160))+(((1.332e-5)*r20*x1155))+(((1.476)*x1162))+((x1156*x1159))+((x1156*x1157)));
IkReal x1178=(((x1159*x1161))+(((4.44e-6)*x1170))+(((4.44e-6)*x1160))+((x1157*x1161))+(((4.44e-6)*r20*x1155))+(((0.492)*x1162)));
j1evalpoly[0]=((-1.468e-5)+x1176+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.468e-5)+x1176+(((-1.0)*x1178))))))+(((htj1*htj1)*(((-1.468e-5)+x1175+(((-1.0)*x1177))))))+(((4.0)*htj1))+(((-1.0)*x1178))+(((8.0)*(htj1*htj1*htj1)))+(((4.0)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((1.468e-5)+x1175+(((-1.0)*x1177)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1179=(cj5*sj4);
IkReal x1180=(cj1*cj4);
IkReal x1181=(cj4*sj1);
IkReal x1182=((1.0)*cj1);
IkReal x1183=(sj4*sj5);
if( IKabs(((((-1.0)*r12*x1180))+(((-1.0)*r10*x1182*x1183))+((r22*x1181))+((r20*sj1*x1183))+(((-1.0)*r11*x1179*x1182))+((r21*sj1*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x1179))+((r22*x1180))+((cj1*r21*x1179))+((cj1*r20*x1183))+((r12*x1181))+((r10*sj1*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1180))+(((-1.0)*r10*x1182*x1183))+((r22*x1181))+((r20*sj1*x1183))+(((-1.0)*r11*x1179*x1182))+((r21*sj1*x1179))))+IKsqr((((r11*sj1*x1179))+((r22*x1180))+((cj1*r21*x1179))+((cj1*r20*x1183))+((r12*x1181))+((r10*sj1*x1183))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x1180))+(((-1.0)*r10*x1182*x1183))+((r22*x1181))+((r20*sj1*x1183))+(((-1.0)*r11*x1179*x1182))+((r21*sj1*x1179))), (((r11*sj1*x1179))+((r22*x1180))+((cj1*r21*x1179))+((cj1*r20*x1183))+((r12*x1181))+((r10*sj1*x1183))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1184=IKcos(j2);
IkReal x1185=IKsin(j2);
IkReal x1186=(r21*sj5);
IkReal x1187=((1.0)*sj4);
IkReal x1188=(cj4*cj5);
IkReal x1189=((7.8e-7)*sj4);
IkReal x1190=((0.123)*cj5);
IkReal x1191=(r10*sj5);
IkReal x1192=(r20*sj5);
IkReal x1193=(cj3*cj4);
IkReal x1194=((1.0)*cj4);
IkReal x1195=(cj5*sj3);
IkReal x1196=((1.0)*sj3);
IkReal x1197=(r11*sj5);
IkReal x1198=((7.8e-7)*cj4);
IkReal x1199=(sj1*x1184);
IkReal x1200=(cj1*x1184);
IkReal x1201=(sj1*x1185);
IkReal x1202=(cj1*x1185);
IkReal x1203=((1.0)*x1202);
evalcond[0]=(x1201+x1200+(((-1.0)*cj5*r21*x1187))+(((-1.0)*r22*x1194))+(((-1.0)*x1187*x1192)));
evalcond[1]=(x1199+(((-1.0)*x1187*x1191))+(((-1.0)*x1203))+(((-1.0)*cj5*r11*x1187))+(((-1.0)*r12*x1194)));
evalcond[2]=(x1199+((cj3*r21*x1188))+(((-1.0)*x1186*x1196))+(((-1.0)*cj3*r22*x1187))+((x1192*x1193))+(((-1.0)*x1203))+((r20*x1195)));
evalcond[3]=(((cj3*r11*x1188))+((r10*x1195))+(((-1.0)*x1200))+(((-1.0)*x1201))+(((-1.0)*x1196*x1197))+(((-1.0)*cj3*r12*x1187))+((x1191*x1193)));
evalcond[4]=((((7.8e-7)*r21*x1188))+(((-1.11e-6)*x1199))+(((-3.67e-6)*sj1))+(((1.11e-6)*x1202))+(((-1.0)*pz))+(((-1.0)*r22*x1189))+((x1192*x1198))+(((-0.527)*x1200))+(((-0.527)*x1201))+(((-0.123)*x1186))+(((-0.5)*cj1))+((r20*x1190)));
evalcond[5]=((((7.8e-7)*r11*x1188))+(((0.527)*x1202))+(((3.67e-6)*cj1))+((r10*x1190))+(((1.11e-6)*x1201))+(((1.11e-6)*x1200))+(((-1.0)*py))+(((-0.527)*x1199))+(((-0.123)*x1197))+(((-0.5)*sj1))+((x1191*x1198))+(((-1.0)*r12*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1204=((1.0)*sj5);
IkReal x1205=((1.0)*sj4);
CheckValue<IkReal> x1206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x1204))+(((-1.0)*cj5*r11*x1205))+(((-1.0)*cj4*r12)))),-1);
if(!x1206.valid){
continue;
}
CheckValue<IkReal> x1207 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x1204)))),IkReal((((cj4*r20*sj5))+(((-1.0)*r22*x1205))+((cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1207.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1206.value)))+(x1207.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1208=IKcos(j3);
IkReal x1209=IKsin(j3);
IkReal x1210=(r02*sj4);
IkReal x1211=(r01*sj5);
IkReal x1212=(cj4*cj5);
IkReal x1213=(cj4*sj5);
IkReal x1214=(cj5*x1208);
IkReal x1215=((1.0)*x1208);
IkReal x1216=((1.0)*x1209);
IkReal x1217=(sj4*x1209);
evalcond[0]=(((r00*x1208*x1213))+((cj5*r00*x1209))+((r01*x1208*x1212))+(((-1.0)*x1210*x1215))+(((-1.0)*x1211*x1216)));
evalcond[1]=(((r22*x1217))+(((-1.0)*r20*x1213*x1216))+(((-1.0)*r21*x1212*x1216))+((r20*x1214))+(((-1.0)*r21*sj5*x1215)));
evalcond[2]=(((r12*x1217))+(((-1.0)*r10*x1213*x1216))+((r10*x1214))+(((-1.0)*r11*sj5*x1215))+(((-1.0)*r11*x1212*x1216)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x1213*x1216))+((r00*x1214))+(((-1.0)*x1211*x1215))+((x1209*x1210))+(((-1.0)*r01*x1212*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1218=((12.0)*py);
IkReal x1219=((12.0)*pz);
IkReal x1220=((2.108)*cj4);
IkReal x1221=(cj4*r22);
IkReal x1222=(cj5*sj4);
IkReal x1223=((9.36e-6)*cj4);
IkReal x1224=(r10*sj5);
IkReal x1225=((9.36e-6)*sj4);
IkReal x1226=(cj5*r11);
IkReal x1227=((3.12e-6)*cj4);
IkReal x1228=(cj5*r21);
IkReal x1229=(cj5*r20);
IkReal x1230=(r21*sj5);
IkReal x1231=(r20*sj5);
IkReal x1232=(cj5*r10);
IkReal x1233=(cj4*r12);
IkReal x1234=((3.12e-6)*sj4);
IkReal x1235=(r11*sj5);
IkReal x1236=(r12*x1225);
IkReal x1237=((6.324)*x1233);
IkReal x1238=((1.476)*x1235);
IkReal x1239=(r22*x1225);
IkReal x1240=((1.332e-5)*x1233);
IkReal x1241=((6.324)*x1221);
IkReal x1242=((1.476)*x1230);
IkReal x1243=(sj4*x1231);
IkReal x1244=((6.324)*r11*x1222);
IkReal x1245=((6.324)*sj4*x1224);
IkReal x1246=((6.324)*r21*x1222);
IkReal x1247=((1.332e-5)*r11*x1222);
IkReal x1248=((6.324)*x1243);
IkReal x1249=((1.332e-5)*sj4*x1224);
IkReal x1250=(((x1223*x1228))+((x1223*x1231))+(((1.476)*x1229)));
IkReal x1251=(x1245+x1244+x1236+x1237+x1238+x1218);
IkReal x1252=((((1.476)*x1232))+(((1.332e-5)*x1243))+((x1223*x1226))+((x1223*x1224))+(((1.332e-5)*r21*x1222))+(((1.332e-5)*x1221)));
IkReal x1253=(x1241+x1240+x1242+x1247+x1246+x1249+x1248+x1239+x1219);
j1eval[0]=((16.00011744)+(IKabs(((-2.0)+(((-1.0)*x1250))+x1253)))+(IKabs(((1.468e-5)+(((-1.0)*x1252))+x1251)))+(IKabs(((-1.468e-5)+(((-1.0)*x1252))+x1251)))+(IKabs(((2.0)+(((-1.0)*x1250))+x1253)))+(IKabs(((1.468e-5)+(((-1.0)*x1224*x1227))+(((-4.44e-6)*x1221))+(((4.0)*py))+(((0.492)*x1235))+(((-1.0)*x1226*x1227))+(((2.108)*r11*x1222))+(((-4.44e-6)*x1243))+(((2.108)*sj4*x1224))+(((-0.492)*x1232))+((r12*x1220))+(((-4.44e-6)*r21*x1222))+((r12*x1234)))))+(IKabs(((-2.0)+(((4.44e-6)*x1233))+(((2.108)*x1243))+(((4.44e-6)*sj4*x1224))+(((2.108)*r21*x1222))+(((4.0)*pz))+(((0.492)*x1230))+(((-1.0)*x1227*x1228))+(((-1.0)*x1227*x1231))+((r22*x1234))+((r22*x1220))+(((4.44e-6)*r11*x1222))+(((-0.492)*x1229))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1254=((12.0)*pz);
IkReal x1255=((4.0)*pz);
IkReal x1256=(cj5*sj4);
IkReal x1257=(cj4*r22);
IkReal x1258=(cj5*r20);
IkReal x1259=(r20*sj5);
IkReal x1260=((9.36e-6)*cj4);
IkReal x1261=(r21*sj5);
IkReal x1262=(cj5*r21);
IkReal x1263=((3.12e-6)*cj4);
IkReal x1264=(r22*sj4);
IkReal x1265=(cj4*r12);
IkReal x1266=((9.36e-6)*x1264);
IkReal x1267=((1.332e-5)*x1265);
IkReal x1268=((6.324)*x1257);
IkReal x1269=((1.476)*x1261);
IkReal x1270=((0.492)*x1261);
IkReal x1271=((4.44e-6)*x1265);
IkReal x1272=((2.108)*x1257);
IkReal x1273=((3.12e-6)*x1264);
IkReal x1274=(r10*sj4*sj5);
IkReal x1275=((6.324)*r21*x1256);
IkReal x1276=((1.332e-5)*r11*x1256);
IkReal x1277=((6.324)*sj4*x1259);
IkReal x1278=((1.332e-5)*x1274);
IkReal x1279=((2.108)*sj4*x1259);
IkReal x1280=((4.44e-6)*x1274);
IkReal x1281=((4.44e-6)*r11*x1256);
IkReal x1282=((2.108)*r21*x1256);
IkReal x1283=((((1.476)*x1258))+((x1259*x1260))+((x1260*x1262)));
IkReal x1284=(((x1259*x1263))+((x1262*x1263))+(((0.492)*x1258)));
IkReal x1285=(x1278+x1275+x1276+x1277+x1269+x1268+x1267+x1266+x1254);
IkReal x1286=(x1279+x1270+x1271+x1272+x1273+x1255+x1281+x1280+x1282);
op[0]=((-2.0)+x1286+(((-1.0)*x1284)));
op[1]=2.936e-5;
op[2]=((-2.0)+x1285+(((-1.0)*x1283)));
op[3]=5.872e-5;
op[4]=((2.0)+x1285+(((-1.0)*x1283)));
op[5]=2.936e-5;
op[6]=((2.0)+x1286+(((-1.0)*x1284)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1287=((4.0)*py);
IkReal x1288=((12.0)*py);
IkReal x1289=(cj4*r12);
IkReal x1290=(sj4*sj5);
IkReal x1291=((9.36e-6)*cj4);
IkReal x1292=(r10*sj5);
IkReal x1293=(r12*sj4);
IkReal x1294=(cj5*r11);
IkReal x1295=(cj4*r22);
IkReal x1296=((3.12e-6)*cj4);
IkReal x1297=(cj5*r10);
IkReal x1298=(r11*sj5);
IkReal x1299=((2.108)*x1289);
IkReal x1300=((0.492)*x1298);
IkReal x1301=((3.12e-6)*x1293);
IkReal x1302=((9.36e-6)*x1293);
IkReal x1303=((6.324)*x1289);
IkReal x1304=((1.476)*x1298);
IkReal x1305=(cj5*r21*sj4);
IkReal x1306=((2.108)*r10*x1290);
IkReal x1307=((2.108)*sj4*x1294);
IkReal x1308=((6.324)*sj4*x1294);
IkReal x1309=((6.324)*r10*x1290);
IkReal x1310=(x1304+x1302+x1303+x1308+x1309+x1288);
IkReal x1311=(x1306+x1307+x1300+x1301+x1287+x1299);
IkReal x1312=((((1.332e-5)*x1295))+((x1291*x1294))+((x1291*x1292))+(((1.476)*x1297))+(((1.332e-5)*x1305))+(((1.332e-5)*r20*x1290)));
IkReal x1313=((((4.44e-6)*x1305))+(((0.492)*x1297))+((x1294*x1296))+(((4.44e-6)*r20*x1290))+(((4.44e-6)*x1295))+((x1292*x1296)));
j1evalpoly[0]=((-1.468e-5)+x1311+(((-1.0)*x1313))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.468e-5)+x1311+(((-1.0)*x1313))))))+(((4.0)*htj1))+(((8.0)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((1.468e-5)+x1310+(((-1.0)*x1312))))))+(((htj1*htj1)*(((-1.468e-5)+x1310+(((-1.0)*x1312))))))+(((4.0)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1314=(cj5*sj4);
IkReal x1315=(cj1*cj4);
IkReal x1316=(cj4*sj1);
IkReal x1317=((1.0)*cj1);
IkReal x1318=(sj4*sj5);
if( IKabs((((r20*sj1*x1318))+((r21*sj1*x1314))+(((-1.0)*r12*x1315))+((r22*x1316))+(((-1.0)*r11*x1314*x1317))+(((-1.0)*r10*x1317*x1318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x1314))+((r22*x1315))+((r12*x1316))+((cj1*r20*x1318))+((r10*sj1*x1318))+((cj1*r21*x1314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1318))+((r21*sj1*x1314))+(((-1.0)*r12*x1315))+((r22*x1316))+(((-1.0)*r11*x1314*x1317))+(((-1.0)*r10*x1317*x1318))))+IKsqr((((r11*sj1*x1314))+((r22*x1315))+((r12*x1316))+((cj1*r20*x1318))+((r10*sj1*x1318))+((cj1*r21*x1314))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1318))+((r21*sj1*x1314))+(((-1.0)*r12*x1315))+((r22*x1316))+(((-1.0)*r11*x1314*x1317))+(((-1.0)*r10*x1317*x1318))), (((r11*sj1*x1314))+((r22*x1315))+((r12*x1316))+((cj1*r20*x1318))+((r10*sj1*x1318))+((cj1*r21*x1314))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1319=IKcos(j2);
IkReal x1320=IKsin(j2);
IkReal x1321=(r21*sj5);
IkReal x1322=((1.0)*sj4);
IkReal x1323=(cj4*cj5);
IkReal x1324=((7.8e-7)*sj4);
IkReal x1325=((0.123)*cj5);
IkReal x1326=(r10*sj5);
IkReal x1327=(r20*sj5);
IkReal x1328=(cj3*cj4);
IkReal x1329=((1.0)*cj4);
IkReal x1330=(cj5*sj3);
IkReal x1331=((1.0)*sj3);
IkReal x1332=(r11*sj5);
IkReal x1333=((7.8e-7)*cj4);
IkReal x1334=(sj1*x1319);
IkReal x1335=(cj1*x1319);
IkReal x1336=(sj1*x1320);
IkReal x1337=(cj1*x1320);
IkReal x1338=((1.0)*x1337);
evalcond[0]=(x1335+x1336+(((-1.0)*cj5*r21*x1322))+(((-1.0)*r22*x1329))+(((-1.0)*x1322*x1327)));
evalcond[1]=(x1334+(((-1.0)*cj5*r11*x1322))+(((-1.0)*x1322*x1326))+(((-1.0)*r12*x1329))+(((-1.0)*x1338)));
evalcond[2]=(x1334+(((-1.0)*cj3*r22*x1322))+((r20*x1330))+((x1327*x1328))+(((-1.0)*x1338))+(((-1.0)*x1321*x1331))+((cj3*r21*x1323)));
evalcond[3]=((((-1.0)*x1336))+(((-1.0)*x1335))+((x1326*x1328))+((r10*x1330))+(((-1.0)*x1331*x1332))+(((-1.0)*cj3*r12*x1322))+((cj3*r11*x1323)));
evalcond[4]=((((-1.11e-6)*x1334))+(((-1.0)*r22*x1324))+(((-3.67e-6)*sj1))+(((1.11e-6)*x1337))+(((-1.0)*pz))+((x1327*x1333))+(((7.8e-7)*r21*x1323))+(((-0.527)*x1335))+(((-0.527)*x1336))+((r20*x1325))+(((-0.5)*cj1))+(((-0.123)*x1321)));
evalcond[5]=((((0.527)*x1337))+(((3.67e-6)*cj1))+(((7.8e-7)*r11*x1323))+(((1.11e-6)*x1335))+(((1.11e-6)*x1336))+((r10*x1325))+(((-1.0)*r12*x1324))+(((-1.0)*py))+(((-0.123)*x1332))+((x1326*x1333))+(((-0.527)*x1334))+(((-0.5)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1339 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal((((cj4*cj5*r11))+((cj4*r10*sj5))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1339.valid){
continue;
}
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x1340.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1339.value)+(((1.5707963267949)*(x1340.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1341=IKcos(j3);
IkReal x1342=IKsin(j3);
IkReal x1343=(r02*sj4);
IkReal x1344=(r01*sj5);
IkReal x1345=(cj4*cj5);
IkReal x1346=(cj4*sj5);
IkReal x1347=(cj5*x1341);
IkReal x1348=((1.0)*x1341);
IkReal x1349=((1.0)*x1342);
IkReal x1350=(sj4*x1342);
evalcond[0]=(((cj5*r00*x1342))+((r01*x1341*x1345))+((r00*x1341*x1346))+(((-1.0)*x1343*x1348))+(((-1.0)*x1344*x1349)));
evalcond[1]=(((r22*x1350))+(((-1.0)*r20*x1346*x1349))+(((-1.0)*r21*x1345*x1349))+(((-1.0)*r21*sj5*x1348))+((r20*x1347)));
evalcond[2]=((((-1.0)*r10*x1346*x1349))+(((-1.0)*r11*x1345*x1349))+((r12*x1350))+(((-1.0)*r11*sj5*x1348))+((r10*x1347)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x1346*x1349))+(((-1.0)*r01*x1345*x1349))+((x1342*x1343))+((r00*x1347))+(((-1.0)*x1344*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1351=((12.0)*py);
IkReal x1352=((12.0)*pz);
IkReal x1353=((2.108)*cj4);
IkReal x1354=(cj4*r22);
IkReal x1355=(cj5*sj4);
IkReal x1356=((9.36e-6)*cj4);
IkReal x1357=(r10*sj5);
IkReal x1358=((9.36e-6)*sj4);
IkReal x1359=(cj5*r11);
IkReal x1360=((3.12e-6)*cj4);
IkReal x1361=(cj5*r21);
IkReal x1362=(cj5*r20);
IkReal x1363=(r21*sj5);
IkReal x1364=(r20*sj5);
IkReal x1365=(cj5*r10);
IkReal x1366=(cj4*r12);
IkReal x1367=((3.12e-6)*sj4);
IkReal x1368=(r11*sj5);
IkReal x1369=(r12*x1358);
IkReal x1370=((6.324)*x1366);
IkReal x1371=((1.476)*x1368);
IkReal x1372=(r22*x1358);
IkReal x1373=((1.332e-5)*x1366);
IkReal x1374=((6.324)*x1354);
IkReal x1375=((1.476)*x1363);
IkReal x1376=(sj4*x1364);
IkReal x1377=((6.324)*r11*x1355);
IkReal x1378=((6.324)*sj4*x1357);
IkReal x1379=((6.324)*r21*x1355);
IkReal x1380=((1.332e-5)*r11*x1355);
IkReal x1381=((6.324)*x1376);
IkReal x1382=((1.332e-5)*sj4*x1357);
IkReal x1383=(((x1356*x1364))+((x1356*x1361))+(((1.476)*x1362)));
IkReal x1384=(x1351+x1369+x1371+x1370+x1377+x1378);
IkReal x1385=((((1.476)*x1365))+(((1.332e-5)*x1354))+(((1.332e-5)*x1376))+(((1.332e-5)*r21*x1355))+((x1356*x1359))+((x1356*x1357)));
IkReal x1386=(x1352+x1373+x1372+x1375+x1374+x1379+x1380+x1381+x1382);
j1eval[0]=((16.00011744)+(IKabs(((2.0)+(((-1.0)*x1383))+x1386)))+(IKabs(((-1.468e-5)+(((-1.0)*x1385))+x1384)))+(IKabs(((1.468e-5)+(((-1.0)*x1385))+x1384)))+(IKabs(((-2.0)+(((0.492)*x1363))+((r22*x1353))+(((4.44e-6)*x1366))+(((4.0)*pz))+((r22*x1367))+(((-0.492)*x1362))+(((2.108)*x1376))+(((4.44e-6)*sj4*x1357))+(((-1.0)*x1360*x1364))+(((-1.0)*x1360*x1361))+(((4.44e-6)*r11*x1355))+(((2.108)*r21*x1355)))))+(IKabs(((1.468e-5)+(((-4.44e-6)*x1354))+(((2.108)*sj4*x1357))+(((0.492)*x1368))+(((4.0)*py))+(((2.108)*r11*x1355))+(((-0.492)*x1365))+(((-4.44e-6)*r21*x1355))+(((-1.0)*x1359*x1360))+(((-4.44e-6)*x1376))+((r12*x1367))+(((-1.0)*x1357*x1360))+((r12*x1353)))))+(IKabs(((-2.0)+(((-1.0)*x1383))+x1386))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1387=((12.0)*pz);
IkReal x1388=((4.0)*pz);
IkReal x1389=(cj5*sj4);
IkReal x1390=(cj4*r22);
IkReal x1391=(cj5*r20);
IkReal x1392=(r20*sj5);
IkReal x1393=((9.36e-6)*cj4);
IkReal x1394=(r21*sj5);
IkReal x1395=(cj5*r21);
IkReal x1396=((3.12e-6)*cj4);
IkReal x1397=(r22*sj4);
IkReal x1398=(cj4*r12);
IkReal x1399=((9.36e-6)*x1397);
IkReal x1400=((1.332e-5)*x1398);
IkReal x1401=((6.324)*x1390);
IkReal x1402=((1.476)*x1394);
IkReal x1403=((0.492)*x1394);
IkReal x1404=((4.44e-6)*x1398);
IkReal x1405=((2.108)*x1390);
IkReal x1406=((3.12e-6)*x1397);
IkReal x1407=(r10*sj4*sj5);
IkReal x1408=((6.324)*r21*x1389);
IkReal x1409=((1.332e-5)*r11*x1389);
IkReal x1410=((6.324)*sj4*x1392);
IkReal x1411=((1.332e-5)*x1407);
IkReal x1412=((2.108)*sj4*x1392);
IkReal x1413=((4.44e-6)*x1407);
IkReal x1414=((4.44e-6)*r11*x1389);
IkReal x1415=((2.108)*r21*x1389);
IkReal x1416=(((x1393*x1395))+(((1.476)*x1391))+((x1392*x1393)));
IkReal x1417=((((0.492)*x1391))+((x1395*x1396))+((x1392*x1396)));
IkReal x1418=(x1387+x1399+x1410+x1411+x1409+x1408+x1402+x1401+x1400);
IkReal x1419=(x1388+x1412+x1413+x1414+x1415+x1403+x1406+x1405+x1404);
op[0]=((-2.0)+(((-1.0)*x1417))+x1419);
op[1]=2.936e-5;
op[2]=((-2.0)+(((-1.0)*x1416))+x1418);
op[3]=5.872e-5;
op[4]=((2.0)+(((-1.0)*x1416))+x1418);
op[5]=2.936e-5;
op[6]=((2.0)+(((-1.0)*x1417))+x1419);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1420=((4.0)*py);
IkReal x1421=((12.0)*py);
IkReal x1422=(cj4*r12);
IkReal x1423=(sj4*sj5);
IkReal x1424=((9.36e-6)*cj4);
IkReal x1425=(r10*sj5);
IkReal x1426=(r12*sj4);
IkReal x1427=(cj5*r11);
IkReal x1428=(cj4*r22);
IkReal x1429=((3.12e-6)*cj4);
IkReal x1430=(cj5*r10);
IkReal x1431=(r11*sj5);
IkReal x1432=((2.108)*x1422);
IkReal x1433=((0.492)*x1431);
IkReal x1434=((3.12e-6)*x1426);
IkReal x1435=((9.36e-6)*x1426);
IkReal x1436=((6.324)*x1422);
IkReal x1437=((1.476)*x1431);
IkReal x1438=(cj5*r21*sj4);
IkReal x1439=((2.108)*r10*x1423);
IkReal x1440=((2.108)*sj4*x1427);
IkReal x1441=((6.324)*sj4*x1427);
IkReal x1442=((6.324)*r10*x1423);
IkReal x1443=(x1421+x1436+x1437+x1435+x1442+x1441);
IkReal x1444=(x1420+x1434+x1432+x1433+x1439+x1440);
IkReal x1445=(((x1424*x1425))+((x1424*x1427))+(((1.332e-5)*r20*x1423))+(((1.332e-5)*x1428))+(((1.332e-5)*x1438))+(((1.476)*x1430)));
IkReal x1446=((((4.44e-6)*x1438))+((x1425*x1429))+(((0.492)*x1430))+(((4.44e-6)*x1428))+(((4.44e-6)*r20*x1423))+((x1427*x1429)));
j1evalpoly[0]=((-1.468e-5)+(((htj1*htj1)*(((-1.468e-5)+x1443+(((-1.0)*x1445))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.468e-5)+x1444+(((-1.0)*x1446))))))+(((4.0)*htj1))+x1444+(((-1.0)*x1446))+(((htj1*htj1*htj1*htj1)*(((1.468e-5)+x1443+(((-1.0)*x1445))))))+(((8.0)*(htj1*htj1*htj1)))+(((4.0)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1447=(cj5*sj4);
IkReal x1448=(cj1*cj4);
IkReal x1449=(cj4*sj1);
IkReal x1450=((1.0)*cj1);
IkReal x1451=(sj4*sj5);
if( IKabs((((r22*x1449))+((r21*sj1*x1447))+(((-1.0)*r12*x1448))+(((-1.0)*r10*x1450*x1451))+(((-1.0)*r11*x1447*x1450))+((r20*sj1*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1447))+((r12*x1449))+((r22*x1448))+((cj1*r20*x1451))+((r11*sj1*x1447))+((r10*sj1*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1449))+((r21*sj1*x1447))+(((-1.0)*r12*x1448))+(((-1.0)*r10*x1450*x1451))+(((-1.0)*r11*x1447*x1450))+((r20*sj1*x1451))))+IKsqr((((cj1*r21*x1447))+((r12*x1449))+((r22*x1448))+((cj1*r20*x1451))+((r11*sj1*x1447))+((r10*sj1*x1451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1449))+((r21*sj1*x1447))+(((-1.0)*r12*x1448))+(((-1.0)*r10*x1450*x1451))+(((-1.0)*r11*x1447*x1450))+((r20*sj1*x1451))), (((cj1*r21*x1447))+((r12*x1449))+((r22*x1448))+((cj1*r20*x1451))+((r11*sj1*x1447))+((r10*sj1*x1451))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1452=IKcos(j2);
IkReal x1453=IKsin(j2);
IkReal x1454=(r21*sj5);
IkReal x1455=((1.0)*sj4);
IkReal x1456=(cj4*cj5);
IkReal x1457=((7.8e-7)*sj4);
IkReal x1458=((0.123)*cj5);
IkReal x1459=(r10*sj5);
IkReal x1460=(r20*sj5);
IkReal x1461=(cj3*cj4);
IkReal x1462=((1.0)*cj4);
IkReal x1463=(cj5*sj3);
IkReal x1464=((1.0)*sj3);
IkReal x1465=(r11*sj5);
IkReal x1466=((7.8e-7)*cj4);
IkReal x1467=(sj1*x1452);
IkReal x1468=(cj1*x1452);
IkReal x1469=(sj1*x1453);
IkReal x1470=(cj1*x1453);
IkReal x1471=((1.0)*x1470);
evalcond[0]=((((-1.0)*cj5*r21*x1455))+(((-1.0)*r22*x1462))+(((-1.0)*x1455*x1460))+x1469+x1468);
evalcond[1]=((((-1.0)*x1455*x1459))+x1467+(((-1.0)*x1471))+(((-1.0)*cj5*r11*x1455))+(((-1.0)*r12*x1462)));
evalcond[2]=(((r20*x1463))+(((-1.0)*cj3*r22*x1455))+(((-1.0)*x1454*x1464))+((x1460*x1461))+x1467+(((-1.0)*x1471))+((cj3*r21*x1456)));
evalcond[3]=(((x1459*x1461))+(((-1.0)*x1464*x1465))+((cj3*r11*x1456))+((r10*x1463))+(((-1.0)*x1469))+(((-1.0)*x1468))+(((-1.0)*cj3*r12*x1455)));
evalcond[4]=((((-1.0)*r22*x1457))+(((-3.67e-6)*sj1))+((r20*x1458))+(((-1.11e-6)*x1467))+(((-1.0)*pz))+((x1460*x1466))+(((1.11e-6)*x1470))+(((7.8e-7)*r21*x1456))+(((-0.5)*cj1))+(((-0.527)*x1468))+(((-0.527)*x1469))+(((-0.123)*x1454)));
evalcond[5]=(((r10*x1458))+(((7.8e-7)*r11*x1456))+(((1.11e-6)*x1468))+(((1.11e-6)*x1469))+(((3.67e-6)*cj1))+((x1459*x1466))+(((-1.0)*py))+(((-0.527)*x1467))+(((-0.5)*sj1))+(((0.527)*x1470))+(((-0.123)*x1465))+(((-1.0)*r12*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1472=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x1472;
j3eval[1]=IKsign(x1472);
j3eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))))+(IKabs((((cj4*r20*sj5))+((cj4*cj5*r21))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1473=((1.0)*sj4);
IkReal x1474=((((-1.0)*cj5*r21*x1473))+(((-1.0)*r20*sj5*x1473))+(((-1.0)*cj4*r22)));
j3eval[0]=x1474;
j3eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs(((((-1.0)*r12*x1473))+((cj4*cj5*r11))+((cj4*r10*sj5))))));
j3eval[2]=IKsign(x1474);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1475=cj4*cj4;
IkReal x1476=r00*r00;
IkReal x1477=cj5*cj5;
IkReal x1478=r01*r01;
IkReal x1479=r02*r02;
IkReal x1480=(r00*sj5);
IkReal x1481=((2.0)*cj5*r01);
IkReal x1482=(cj4*r02*sj4);
IkReal x1483=((1.0)*x1477);
IkReal x1484=(x1475*x1476);
IkReal x1485=((((-1.0)*x1481*x1482))+(((-1.0)*x1480*x1481))+((x1475*x1477*x1478))+((x1475*x1480*x1481))+((x1476*x1477))+(((-1.0)*x1483*x1484))+x1478+x1479+x1484+(((-1.0)*x1478*x1483))+(((-1.0)*x1475*x1479))+(((-2.0)*x1480*x1482)));
j3eval[0]=x1485;
j3eval[1]=((IKabs(((((-1.0)*r02*sj4))+((cj4*cj5*r01))+((cj4*x1480)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x1485);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1486=cj4*cj4;
IkReal x1487=r00*r00;
IkReal x1488=cj5*cj5;
IkReal x1489=r01*r01;
IkReal x1490=r02*r02;
IkReal x1491=(r02*sj4);
IkReal x1492=(r00*sj5);
IkReal x1493=(cj4*x1492);
IkReal x1494=((2.0)*cj5*r01);
IkReal x1495=(x1486*x1488);
CheckValue<IkReal> x1496=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1488*x1489))+((x1489*x1495))+(((-1.0)*x1487*x1495))+((x1487*x1488))+(((-1.0)*x1486*x1490))+(((-1.0)*x1492*x1494))+(((-2.0)*x1491*x1493))+((x1486*x1487))+x1490+x1489+(((-1.0)*cj4*x1491*x1494))+((x1486*x1492*x1494)))),-1);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497 = IKatan2WithCheck(IkReal(((((-1.0)*x1491))+((cj4*cj5*r01))+x1493)),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1497.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1496.value)))+(x1497.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1498=IKcos(j3);
IkReal x1499=IKsin(j3);
IkReal x1500=(r02*sj4);
IkReal x1501=(r01*sj5);
IkReal x1502=(cj4*cj5);
IkReal x1503=(cj4*sj5);
IkReal x1504=(cj5*x1498);
IkReal x1505=((1.0)*x1498);
IkReal x1506=((1.0)*x1499);
IkReal x1507=(sj4*x1499);
evalcond[0]=(((r00*x1498*x1503))+(((-1.0)*x1501*x1506))+((r01*x1498*x1502))+(((-1.0)*x1500*x1505))+((cj5*r00*x1499)));
evalcond[1]=((((-1.0)*r21*sj5*x1505))+((r20*x1504))+(((-1.0)*r20*x1503*x1506))+((r22*x1507))+(((-1.0)*r21*x1502*x1506)));
evalcond[2]=((((-1.0)*r11*x1502*x1506))+((r12*x1507))+((r10*x1504))+(((-1.0)*r10*x1503*x1506))+(((-1.0)*r11*sj5*x1505)));
evalcond[3]=((1.0)+(((-1.0)*r00*x1503*x1506))+((x1499*x1500))+(((-1.0)*x1501*x1505))+((r00*x1504))+(((-1.0)*r01*x1502*x1506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1508=(cj5*r21);
IkReal x1509=((6.324)*sj4);
IkReal x1510=(r11*sj5);
IkReal x1511=(cj4*r22);
IkReal x1512=(cj5*r11);
IkReal x1513=((3.4632e-12)*cj4);
IkReal x1514=(cj4*sj5);
IkReal x1515=(cj5*r10);
IkReal x1516=((3.33274800001479)*sj4);
IkReal x1517=(r20*sj5);
IkReal x1518=((1.332e-5)*sj4);
IkReal x1519=(r21*sj5);
IkReal x1520=(r12*sj4);
IkReal x1521=(cj5*r20);
IkReal x1522=(r22*sj4);
IkReal x1523=(r10*sj5);
IkReal x1524=((4.44e-6)*sj4);
IkReal x1525=((2.108)*sj4);
IkReal x1526=(cj4*r12);
IkReal x1527=((1.11091600000493)*sj4);
IkReal x1528=((1.332e-5)*x1526);
IkReal x1529=((1.476)*x1521);
IkReal x1530=((0.777852)*x1521);
IkReal x1531=((1.63836e-6)*x1515);
IkReal x1532=((9.36e-6)*cj4*x1508);
IkReal x1533=((9.36e-6)*r20*x1514);
IkReal x1534=(x1512*x1518);
IkReal x1535=(x1518*x1523);
IkReal x1536=((4.93272e-6)*r20*x1514);
IkReal x1537=((4.93272e-6)*cj4*x1508);
IkReal x1538=((1.03896e-11)*r10*x1514);
IkReal x1539=((1.03896e-11)*cj4*x1512);
IkReal x1540=(((x1509*x1517))+((x1508*x1509))+(((12.0)*pz))+(((6.324)*x1511))+(((1.476)*x1519))+(((9.36e-6)*x1522)));
IkReal x1541=(x1528+x1529+x1535+x1534+x1533+x1532);
IkReal x1542=(x1537+x1536+x1531+x1530+x1539+x1538);
IkReal x1543=(((x1508*x1516))+(((1.63836e-6)*x1510))+(((1.03896e-11)*x1520))+(((3.33274800001479)*x1511))+(((4.93272e-6)*x1522))+(((6.324)*pz))+((x1516*x1517))+(((0.777852)*x1519))+(((1.332e-5)*py)));
j1eval[0]=((1.0)+(((6189.23409961003)*(IKabs(((1.05400000001629)+x1542+(((-1.0)*x1543)))))))+(((6189.23409961003)*(IKabs(((-2.0)+x1541+(((-1.0)*x1540)))))))+(((6189.23409961003)*(IKabs(((1.05400000001629)+(((-2.108)*pz))+((x1513*x1523))+(((-1.64424e-6)*x1522))+(((-1.11091600000493)*x1511))+(((-0.259284)*x1519))+(((-5.4612e-7)*x1510))+(((1.64424e-6)*cj4*x1508))+(((-1.0)*x1517*x1527))+(((-3.4632e-12)*x1520))+(((-4.44e-6)*py))+(((-1.0)*x1508*x1527))+(((1.64424e-6)*r20*x1514))+(((0.259284)*x1521))+((x1512*x1513))+(((5.4612e-7)*x1515)))))))+(((6189.23409961003)*(IKabs(((-1.05400000001629)+x1542+(((-1.0)*x1543)))))))+(((6189.23409961003)*(IKabs(((2.0)+((x1512*x1524))+(((-2.108)*x1511))+((x1523*x1524))+(((3.12e-6)*r20*x1514))+(((-3.12e-6)*x1522))+(((3.12e-6)*cj4*x1508))+(((-0.492)*x1519))+(((-1.0)*x1517*x1525))+(((0.492)*x1521))+(((-1.0)*x1508*x1525))+(((-4.0)*pz))+(((4.44e-6)*x1526)))))))+(((6189.23409961003)*(IKabs(((2.0)+x1541+(((-1.0)*x1540))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1544=(cj5*sj4);
IkReal x1545=(cj4*r22);
IkReal x1546=(cj5*r20);
IkReal x1547=(r20*sj5);
IkReal x1548=((9.36e-6)*cj4);
IkReal x1549=(r21*sj5);
IkReal x1550=(cj5*r21);
IkReal x1551=((3.12e-6)*cj4);
IkReal x1552=(r22*sj4);
IkReal x1553=(cj4*r12);
IkReal x1554=((1.332e-5)*x1553);
IkReal x1555=((1.476)*x1546);
IkReal x1556=((4.44e-6)*x1553);
IkReal x1557=((0.492)*x1546);
IkReal x1558=(r10*sj4*sj5);
IkReal x1559=(x1548*x1550);
IkReal x1560=(x1547*x1548);
IkReal x1561=((1.332e-5)*r11*x1544);
IkReal x1562=((1.332e-5)*x1558);
IkReal x1563=(x1547*x1551);
IkReal x1564=((4.44e-6)*x1558);
IkReal x1565=((4.44e-6)*r11*x1544);
IkReal x1566=(x1550*x1551);
IkReal x1567=((((9.36e-6)*x1552))+(((12.0)*pz))+(((6.324)*x1545))+(((1.476)*x1549))+(((6.324)*r21*x1544))+(((6.324)*sj4*x1547)));
IkReal x1568=((((3.12e-6)*x1552))+(((4.0)*pz))+(((0.492)*x1549))+(((2.108)*sj4*x1547))+(((2.108)*x1545))+(((2.108)*r21*x1544)));
IkReal x1569=(x1563+x1564+x1565+x1566+x1557+x1556);
IkReal x1570=(x1560+x1561+x1562+x1555+x1554+x1559);
op[0]=((2.0)+x1569+(((-1.0)*x1568)));
op[1]=-2.936e-5;
op[2]=((2.0)+x1570+(((-1.0)*x1567)));
op[3]=-5.872e-5;
op[4]=((-2.0)+x1570+(((-1.0)*x1567)));
op[5]=-2.936e-5;
op[6]=((-2.0)+x1569+(((-1.0)*x1568)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1571=((2.108)*pz);
IkReal x1572=((4.44e-6)*py);
IkReal x1573=(cj5*r20);
IkReal x1574=(cj4*cj5);
IkReal x1575=(cj5*r10);
IkReal x1576=((3.33274800001479)*sj4);
IkReal x1577=(r20*sj5);
IkReal x1578=(cj5*r21);
IkReal x1579=(r12*sj4);
IkReal x1580=(r21*sj5);
IkReal x1581=(r11*sj5);
IkReal x1582=(cj4*r22);
IkReal x1583=(r22*sj4);
IkReal x1584=((1.11091600000493)*sj4);
IkReal x1585=((5.4612e-7)*x1575);
IkReal x1586=((0.259284)*x1573);
IkReal x1587=((0.777852)*x1573);
IkReal x1588=((1.63836e-6)*x1575);
IkReal x1589=((3.4632e-12)*x1579);
IkReal x1590=((5.4612e-7)*x1581);
IkReal x1591=((1.64424e-6)*x1583);
IkReal x1592=((0.259284)*x1580);
IkReal x1593=((1.11091600000493)*x1582);
IkReal x1594=(cj4*r10*sj5);
IkReal x1595=((3.4632e-12)*x1594);
IkReal x1596=((1.64424e-6)*r21*x1574);
IkReal x1597=((3.4632e-12)*r11*x1574);
IkReal x1598=((4.93272e-6)*cj4*x1577);
IkReal x1599=((4.93272e-6)*r21*x1574);
IkReal x1600=((1.03896e-11)*x1594);
IkReal x1601=((1.03896e-11)*r11*x1574);
IkReal x1602=((1.64424e-6)*cj4*x1577);
IkReal x1603=(x1577*x1584);
IkReal x1604=(x1578*x1584);
IkReal x1605=(x1602+x1586+x1585+x1595+x1597+x1596);
IkReal x1606=(x1601+x1600+x1588+x1587+x1599+x1598);
IkReal x1607=((((1.03896e-11)*x1579))+((x1576*x1577))+((x1576*x1578))+(((4.93272e-6)*x1583))+(((1.63836e-6)*x1581))+(((3.33274800001479)*x1582))+(((6.324)*pz))+(((0.777852)*x1580))+(((1.332e-5)*py)));
IkReal x1608=(x1603+x1604+x1572+x1571+x1589+x1591+x1590+x1593+x1592);
j1evalpoly[0]=((-1.05400000001629)+(((-1.0)*x1608))+x1605+(((htj1*htj1*htj1*htj1)*(((1.05400000001629)+(((-1.0)*x1607))+x1606))))+(((-2.206544e-5)*(htj1*htj1*htj1)))+(((-1.103272e-5)*htj1))+(((htj1*htj1)*(((-1.05400000001629)+(((-1.0)*x1607))+x1606))))+(((-1.103272e-5)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.05400000001629)+(((-1.0)*x1608))+x1605)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1609=(cj4*r12);
IkReal x1610=((1.0)*sj1);
IkReal x1611=(cj4*r22);
IkReal x1612=(sj4*sj5);
IkReal x1613=(cj5*sj4);
IkReal x1614=(cj1*x1613);
if( IKabs((((cj1*x1609))+((sj1*x1611))+((cj1*r10*x1612))+((r11*x1614))+((r20*sj1*x1612))+((r21*sj1*x1613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1614))+((cj1*r20*x1612))+(((-1.0)*r10*x1610*x1612))+(((-1.0)*x1609*x1610))+(((-1.0)*r11*x1610*x1613))+((cj1*x1611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1609))+((sj1*x1611))+((cj1*r10*x1612))+((r11*x1614))+((r20*sj1*x1612))+((r21*sj1*x1613))))+IKsqr((((r21*x1614))+((cj1*r20*x1612))+(((-1.0)*r10*x1610*x1612))+(((-1.0)*x1609*x1610))+(((-1.0)*r11*x1610*x1613))+((cj1*x1611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1609))+((sj1*x1611))+((cj1*r10*x1612))+((r11*x1614))+((r20*sj1*x1612))+((r21*sj1*x1613))), (((r21*x1614))+((cj1*r20*x1612))+(((-1.0)*r10*x1610*x1612))+(((-1.0)*x1609*x1610))+(((-1.0)*r11*x1610*x1613))+((cj1*x1611))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1615=IKsin(j2);
IkReal x1616=IKcos(j2);
IkReal x1617=(r21*sj5);
IkReal x1618=((1.0)*sj4);
IkReal x1619=(cj4*cj5);
IkReal x1620=((7.8e-7)*sj4);
IkReal x1621=((0.123)*cj5);
IkReal x1622=(r10*sj5);
IkReal x1623=(r20*sj5);
IkReal x1624=(cj3*cj4);
IkReal x1625=((1.0)*cj4);
IkReal x1626=(cj5*sj3);
IkReal x1627=((1.0)*sj3);
IkReal x1628=(r11*sj5);
IkReal x1629=((7.8e-7)*cj4);
IkReal x1630=(cj1*x1616);
IkReal x1631=(sj1*x1615);
IkReal x1632=(sj1*x1616);
IkReal x1633=(cj1*x1615);
IkReal x1634=(x1630+x1631);
evalcond[0]=(x1634+(((-1.0)*r22*x1625))+(((-1.0)*cj5*r21*x1618))+(((-1.0)*x1618*x1623)));
evalcond[1]=((((-1.0)*r12*x1625))+x1633+(((-1.0)*x1632))+(((-1.0)*cj5*r11*x1618))+(((-1.0)*x1618*x1622)));
evalcond[2]=(x1634+(((-1.0)*cj3*r12*x1618))+((x1622*x1624))+((r10*x1626))+(((-1.0)*x1627*x1628))+((cj3*r11*x1619)));
evalcond[3]=((((-1.0)*cj3*r22*x1618))+((r20*x1626))+x1632+((x1623*x1624))+((cj3*r21*x1619))+(((-1.0)*x1617*x1627))+(((-1.0)*x1633)));
evalcond[4]=(((r20*x1621))+(((-3.67e-6)*sj1))+((x1623*x1629))+(((-1.11e-6)*x1632))+(((-1.0)*pz))+(((-1.0)*r22*x1620))+(((-0.527)*x1631))+(((-0.527)*x1630))+(((-0.5)*cj1))+(((1.11e-6)*x1633))+(((-0.123)*x1617))+(((7.8e-7)*r21*x1619)));
evalcond[5]=((((7.8e-7)*r11*x1619))+(((-1.0)*r12*x1620))+((x1622*x1629))+(((-1.11e-6)*x1630))+(((-1.11e-6)*x1631))+(((0.5)*sj1))+(((0.527)*x1632))+(((-1.0)*py))+(((-3.67e-6)*cj1))+(((-0.527)*x1633))+((r10*x1621))+(((-0.123)*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1635=((1.0)*sj4);
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21*x1635))+(((-1.0)*r20*sj5*x1635))+(((-1.0)*cj4*r22)))),-1);
if(!x1636.valid){
continue;
}
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((((-1.0)*r12*x1635))+((cj4*cj5*r11))+((cj4*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1636.value)))+(x1637.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1638=IKcos(j3);
IkReal x1639=IKsin(j3);
IkReal x1640=(r02*sj4);
IkReal x1641=(r01*sj5);
IkReal x1642=(cj4*cj5);
IkReal x1643=(cj4*sj5);
IkReal x1644=(cj5*x1638);
IkReal x1645=((1.0)*x1638);
IkReal x1646=((1.0)*x1639);
IkReal x1647=(sj4*x1639);
evalcond[0]=((((-1.0)*x1641*x1646))+((cj5*r00*x1639))+((r01*x1638*x1642))+(((-1.0)*x1640*x1645))+((r00*x1638*x1643)));
evalcond[1]=((((-1.0)*r21*x1642*x1646))+((r20*x1644))+(((-1.0)*r21*sj5*x1645))+(((-1.0)*r20*x1643*x1646))+((r22*x1647)));
evalcond[2]=(((r10*x1644))+(((-1.0)*r11*x1642*x1646))+((r12*x1647))+(((-1.0)*r10*x1643*x1646))+(((-1.0)*r11*sj5*x1645)));
evalcond[3]=((1.0)+(((-1.0)*x1641*x1645))+(((-1.0)*r00*x1643*x1646))+((r00*x1644))+(((-1.0)*r01*x1642*x1646))+((x1639*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1648=(cj5*r21);
IkReal x1649=((6.324)*sj4);
IkReal x1650=(r11*sj5);
IkReal x1651=(cj4*r22);
IkReal x1652=(cj5*r11);
IkReal x1653=((3.4632e-12)*cj4);
IkReal x1654=(cj4*sj5);
IkReal x1655=(cj5*r10);
IkReal x1656=((3.33274800001479)*sj4);
IkReal x1657=(r20*sj5);
IkReal x1658=((1.332e-5)*sj4);
IkReal x1659=(r21*sj5);
IkReal x1660=(r12*sj4);
IkReal x1661=(cj5*r20);
IkReal x1662=(r22*sj4);
IkReal x1663=(r10*sj5);
IkReal x1664=((4.44e-6)*sj4);
IkReal x1665=((2.108)*sj4);
IkReal x1666=(cj4*r12);
IkReal x1667=((1.11091600000493)*sj4);
IkReal x1668=((1.332e-5)*x1666);
IkReal x1669=((1.476)*x1661);
IkReal x1670=((0.777852)*x1661);
IkReal x1671=((1.63836e-6)*x1655);
IkReal x1672=((9.36e-6)*cj4*x1648);
IkReal x1673=((9.36e-6)*r20*x1654);
IkReal x1674=(x1652*x1658);
IkReal x1675=(x1658*x1663);
IkReal x1676=((4.93272e-6)*r20*x1654);
IkReal x1677=((4.93272e-6)*cj4*x1648);
IkReal x1678=((1.03896e-11)*r10*x1654);
IkReal x1679=((1.03896e-11)*cj4*x1652);
IkReal x1680=((((12.0)*pz))+(((9.36e-6)*x1662))+((x1648*x1649))+((x1649*x1657))+(((1.476)*x1659))+(((6.324)*x1651)));
IkReal x1681=(x1669+x1668+x1674+x1675+x1672+x1673);
IkReal x1682=(x1678+x1679+x1676+x1677+x1670+x1671);
IkReal x1683=(((x1656*x1657))+(((3.33274800001479)*x1651))+(((4.93272e-6)*x1662))+((x1648*x1656))+(((6.324)*pz))+(((1.63836e-6)*x1650))+(((0.777852)*x1659))+(((1.03896e-11)*x1660))+(((1.332e-5)*py)));
j1eval[0]=((1.0)+(((6189.23409961003)*(IKabs(((1.05400000001629)+(((-2.108)*pz))+(((5.4612e-7)*x1655))+(((-5.4612e-7)*x1650))+(((-1.11091600000493)*x1651))+(((-1.64424e-6)*x1662))+(((-3.4632e-12)*x1660))+(((-0.259284)*x1659))+(((-1.0)*x1657*x1667))+(((-4.44e-6)*py))+(((0.259284)*x1661))+(((-1.0)*x1648*x1667))+((x1653*x1663))+((x1652*x1653))+(((1.64424e-6)*cj4*x1648))+(((1.64424e-6)*r20*x1654)))))))+(((6189.23409961003)*(IKabs(((2.0)+(((-1.0)*x1680))+x1681)))))+(((6189.23409961003)*(IKabs(((-2.0)+(((-1.0)*x1680))+x1681)))))+(((6189.23409961003)*(IKabs(((2.0)+(((-0.492)*x1659))+(((-3.12e-6)*x1662))+(((3.12e-6)*r20*x1654))+(((-2.108)*x1651))+(((4.44e-6)*x1666))+(((0.492)*x1661))+(((3.12e-6)*cj4*x1648))+(((-1.0)*x1657*x1665))+(((-4.0)*pz))+(((-1.0)*x1648*x1665))+((x1652*x1664))+((x1663*x1664)))))))+(((6189.23409961003)*(IKabs(((1.05400000001629)+(((-1.0)*x1683))+x1682)))))+(((6189.23409961003)*(IKabs(((-1.05400000001629)+(((-1.0)*x1683))+x1682))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1684=(cj5*sj4);
IkReal x1685=(cj4*r22);
IkReal x1686=(cj5*r20);
IkReal x1687=(r20*sj5);
IkReal x1688=((9.36e-6)*cj4);
IkReal x1689=(r21*sj5);
IkReal x1690=(cj5*r21);
IkReal x1691=((3.12e-6)*cj4);
IkReal x1692=(r22*sj4);
IkReal x1693=(cj4*r12);
IkReal x1694=((1.332e-5)*x1693);
IkReal x1695=((1.476)*x1686);
IkReal x1696=((4.44e-6)*x1693);
IkReal x1697=((0.492)*x1686);
IkReal x1698=(r10*sj4*sj5);
IkReal x1699=(x1688*x1690);
IkReal x1700=(x1687*x1688);
IkReal x1701=((1.332e-5)*r11*x1684);
IkReal x1702=((1.332e-5)*x1698);
IkReal x1703=(x1687*x1691);
IkReal x1704=((4.44e-6)*x1698);
IkReal x1705=((4.44e-6)*r11*x1684);
IkReal x1706=(x1690*x1691);
IkReal x1707=((((12.0)*pz))+(((6.324)*x1685))+(((9.36e-6)*x1692))+(((6.324)*sj4*x1687))+(((1.476)*x1689))+(((6.324)*r21*x1684)));
IkReal x1708=((((2.108)*sj4*x1687))+(((0.492)*x1689))+(((4.0)*pz))+(((3.12e-6)*x1692))+(((2.108)*x1685))+(((2.108)*r21*x1684)));
IkReal x1709=(x1703+x1704+x1705+x1706+x1696+x1697);
IkReal x1710=(x1700+x1701+x1702+x1694+x1695+x1699);
op[0]=((2.0)+x1709+(((-1.0)*x1708)));
op[1]=-2.936e-5;
op[2]=((2.0)+x1710+(((-1.0)*x1707)));
op[3]=-5.872e-5;
op[4]=((-2.0)+x1710+(((-1.0)*x1707)));
op[5]=-2.936e-5;
op[6]=((-2.0)+x1709+(((-1.0)*x1708)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1711=((2.108)*pz);
IkReal x1712=((4.44e-6)*py);
IkReal x1713=(cj5*r20);
IkReal x1714=(cj4*cj5);
IkReal x1715=(cj5*r10);
IkReal x1716=((3.33274800001479)*sj4);
IkReal x1717=(r20*sj5);
IkReal x1718=(cj5*r21);
IkReal x1719=(r12*sj4);
IkReal x1720=(r21*sj5);
IkReal x1721=(r11*sj5);
IkReal x1722=(cj4*r22);
IkReal x1723=(r22*sj4);
IkReal x1724=((1.11091600000493)*sj4);
IkReal x1725=((5.4612e-7)*x1715);
IkReal x1726=((0.259284)*x1713);
IkReal x1727=((0.777852)*x1713);
IkReal x1728=((1.63836e-6)*x1715);
IkReal x1729=((3.4632e-12)*x1719);
IkReal x1730=((5.4612e-7)*x1721);
IkReal x1731=((1.64424e-6)*x1723);
IkReal x1732=((0.259284)*x1720);
IkReal x1733=((1.11091600000493)*x1722);
IkReal x1734=(cj4*r10*sj5);
IkReal x1735=((3.4632e-12)*x1734);
IkReal x1736=((1.64424e-6)*r21*x1714);
IkReal x1737=((3.4632e-12)*r11*x1714);
IkReal x1738=((4.93272e-6)*cj4*x1717);
IkReal x1739=((4.93272e-6)*r21*x1714);
IkReal x1740=((1.03896e-11)*x1734);
IkReal x1741=((1.03896e-11)*r11*x1714);
IkReal x1742=((1.64424e-6)*cj4*x1717);
IkReal x1743=(x1717*x1724);
IkReal x1744=(x1718*x1724);
IkReal x1745=(x1726+x1725+x1735+x1737+x1736+x1742);
IkReal x1746=(x1728+x1727+x1739+x1738+x1740+x1741);
IkReal x1747=((((1.63836e-6)*x1721))+(((4.93272e-6)*x1723))+((x1716*x1718))+((x1716*x1717))+(((6.324)*pz))+(((0.777852)*x1720))+(((1.03896e-11)*x1719))+(((1.332e-5)*py))+(((3.33274800001479)*x1722)));
IkReal x1748=(x1729+x1731+x1730+x1733+x1732+x1712+x1711+x1744+x1743);
j1evalpoly[0]=((-1.05400000001629)+x1745+(((-2.206544e-5)*(htj1*htj1*htj1)))+(((-1.103272e-5)*htj1))+(((htj1*htj1*htj1*htj1)*(((1.05400000001629)+x1746+(((-1.0)*x1747))))))+(((-1.0)*x1748))+(((-1.103272e-5)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.05400000001629)+x1745+(((-1.0)*x1748))))))+(((htj1*htj1)*(((-1.05400000001629)+x1746+(((-1.0)*x1747)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1749=(cj4*r12);
IkReal x1750=((1.0)*sj1);
IkReal x1751=(cj4*r22);
IkReal x1752=(sj4*sj5);
IkReal x1753=(cj5*sj4);
IkReal x1754=(cj1*x1753);
if( IKabs((((r20*sj1*x1752))+((cj1*r10*x1752))+((cj1*x1749))+((sj1*x1751))+((r11*x1754))+((r21*sj1*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1750*x1753))+(((-1.0)*x1749*x1750))+((r21*x1754))+((cj1*x1751))+((cj1*r20*x1752))+(((-1.0)*r10*x1750*x1752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1752))+((cj1*r10*x1752))+((cj1*x1749))+((sj1*x1751))+((r11*x1754))+((r21*sj1*x1753))))+IKsqr(((((-1.0)*r11*x1750*x1753))+(((-1.0)*x1749*x1750))+((r21*x1754))+((cj1*x1751))+((cj1*r20*x1752))+(((-1.0)*r10*x1750*x1752))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1752))+((cj1*r10*x1752))+((cj1*x1749))+((sj1*x1751))+((r11*x1754))+((r21*sj1*x1753))), ((((-1.0)*r11*x1750*x1753))+(((-1.0)*x1749*x1750))+((r21*x1754))+((cj1*x1751))+((cj1*r20*x1752))+(((-1.0)*r10*x1750*x1752))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1755=IKsin(j2);
IkReal x1756=IKcos(j2);
IkReal x1757=(r21*sj5);
IkReal x1758=((1.0)*sj4);
IkReal x1759=(cj4*cj5);
IkReal x1760=((7.8e-7)*sj4);
IkReal x1761=((0.123)*cj5);
IkReal x1762=(r10*sj5);
IkReal x1763=(r20*sj5);
IkReal x1764=(cj3*cj4);
IkReal x1765=((1.0)*cj4);
IkReal x1766=(cj5*sj3);
IkReal x1767=((1.0)*sj3);
IkReal x1768=(r11*sj5);
IkReal x1769=((7.8e-7)*cj4);
IkReal x1770=(cj1*x1756);
IkReal x1771=(sj1*x1755);
IkReal x1772=(sj1*x1756);
IkReal x1773=(cj1*x1755);
IkReal x1774=(x1771+x1770);
evalcond[0]=(x1774+(((-1.0)*cj5*r21*x1758))+(((-1.0)*x1758*x1763))+(((-1.0)*r22*x1765)));
evalcond[1]=((((-1.0)*x1772))+x1773+(((-1.0)*r12*x1765))+(((-1.0)*x1758*x1762))+(((-1.0)*cj5*r11*x1758)));
evalcond[2]=(((cj3*r11*x1759))+(((-1.0)*cj3*r12*x1758))+x1774+((r10*x1766))+((x1762*x1764))+(((-1.0)*x1767*x1768)));
evalcond[3]=(((r20*x1766))+(((-1.0)*cj3*r22*x1758))+(((-1.0)*x1773))+x1772+(((-1.0)*x1757*x1767))+((cj3*r21*x1759))+((x1763*x1764)));
evalcond[4]=((((-0.123)*x1757))+(((1.11e-6)*x1773))+((r20*x1761))+(((-3.67e-6)*sj1))+(((7.8e-7)*r21*x1759))+(((-0.527)*x1770))+(((-0.527)*x1771))+(((-1.0)*pz))+(((-1.0)*r22*x1760))+(((-0.5)*cj1))+(((-1.11e-6)*x1772))+((x1763*x1769)));
evalcond[5]=((((0.5)*sj1))+(((-0.527)*x1773))+(((-0.123)*x1768))+(((-1.0)*py))+(((-1.0)*r12*x1760))+((r10*x1761))+((x1762*x1769))+(((-3.67e-6)*cj1))+(((-1.11e-6)*x1771))+(((-1.11e-6)*x1770))+(((7.8e-7)*r11*x1759))+(((0.527)*x1772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x1775.valid){
continue;
}
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal((((cj4*r20*sj5))+((cj4*cj5*r21))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1775.value)))+(x1776.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1777=IKcos(j3);
IkReal x1778=IKsin(j3);
IkReal x1779=(r02*sj4);
IkReal x1780=(r01*sj5);
IkReal x1781=(cj4*cj5);
IkReal x1782=(cj4*sj5);
IkReal x1783=(cj5*x1777);
IkReal x1784=((1.0)*x1777);
IkReal x1785=((1.0)*x1778);
IkReal x1786=(sj4*x1778);
evalcond[0]=(((r01*x1777*x1781))+((r00*x1777*x1782))+((cj5*r00*x1778))+(((-1.0)*x1779*x1784))+(((-1.0)*x1780*x1785)));
evalcond[1]=(((r20*x1783))+(((-1.0)*r21*sj5*x1784))+(((-1.0)*r20*x1782*x1785))+((r22*x1786))+(((-1.0)*r21*x1781*x1785)));
evalcond[2]=(((r10*x1783))+(((-1.0)*r11*x1781*x1785))+(((-1.0)*r10*x1782*x1785))+((r12*x1786))+(((-1.0)*r11*sj5*x1784)));
evalcond[3]=((1.0)+(((-1.0)*r01*x1781*x1785))+(((-1.0)*x1780*x1784))+((x1778*x1779))+(((-1.0)*r00*x1782*x1785))+((r00*x1783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1787=(cj5*r21);
IkReal x1788=((6.324)*sj4);
IkReal x1789=(r11*sj5);
IkReal x1790=(cj4*r22);
IkReal x1791=(cj5*r11);
IkReal x1792=((3.4632e-12)*cj4);
IkReal x1793=(cj4*sj5);
IkReal x1794=(cj5*r10);
IkReal x1795=((3.33274800001479)*sj4);
IkReal x1796=(r20*sj5);
IkReal x1797=((1.332e-5)*sj4);
IkReal x1798=(r21*sj5);
IkReal x1799=(r12*sj4);
IkReal x1800=(cj5*r20);
IkReal x1801=(r22*sj4);
IkReal x1802=(r10*sj5);
IkReal x1803=((4.44e-6)*sj4);
IkReal x1804=((2.108)*sj4);
IkReal x1805=(cj4*r12);
IkReal x1806=((1.11091600000493)*sj4);
IkReal x1807=((1.332e-5)*x1805);
IkReal x1808=((1.476)*x1800);
IkReal x1809=((0.777852)*x1800);
IkReal x1810=((1.63836e-6)*x1794);
IkReal x1811=((9.36e-6)*cj4*x1787);
IkReal x1812=((9.36e-6)*r20*x1793);
IkReal x1813=(x1791*x1797);
IkReal x1814=(x1797*x1802);
IkReal x1815=((4.93272e-6)*r20*x1793);
IkReal x1816=((4.93272e-6)*cj4*x1787);
IkReal x1817=((1.03896e-11)*r10*x1793);
IkReal x1818=((1.03896e-11)*cj4*x1791);
IkReal x1819=((((9.36e-6)*x1801))+(((12.0)*pz))+(((1.476)*x1798))+((x1787*x1788))+(((6.324)*x1790))+((x1788*x1796)));
IkReal x1820=(x1814+x1811+x1812+x1813+x1807+x1808);
IkReal x1821=(x1815+x1816+x1817+x1810+x1818+x1809);
IkReal x1822=((((1.03896e-11)*x1799))+(((1.63836e-6)*x1789))+(((6.324)*pz))+((x1787*x1795))+(((0.777852)*x1798))+((x1795*x1796))+(((4.93272e-6)*x1801))+(((3.33274800001479)*x1790))+(((1.332e-5)*py)));
j1eval[0]=((1.0)+(((6189.23409961003)*(IKabs(((-1.05400000001629)+(((-1.0)*x1822))+x1821)))))+(((6189.23409961003)*(IKabs(((2.0)+((x1802*x1803))+(((3.12e-6)*r20*x1793))+(((3.12e-6)*cj4*x1787))+(((0.492)*x1800))+(((-1.0)*x1796*x1804))+(((4.44e-6)*x1805))+(((-3.12e-6)*x1801))+(((-2.108)*x1790))+(((-4.0)*pz))+((x1791*x1803))+(((-0.492)*x1798))+(((-1.0)*x1787*x1804)))))))+(((6189.23409961003)*(IKabs(((-2.0)+(((-1.0)*x1819))+x1820)))))+(((6189.23409961003)*(IKabs(((1.05400000001629)+(((-2.108)*pz))+(((-0.259284)*x1798))+(((-1.11091600000493)*x1790))+(((-1.0)*x1796*x1806))+(((1.64424e-6)*r20*x1793))+((x1792*x1802))+(((5.4612e-7)*x1794))+(((0.259284)*x1800))+(((-1.64424e-6)*x1801))+(((-3.4632e-12)*x1799))+(((-4.44e-6)*py))+(((1.64424e-6)*cj4*x1787))+((x1791*x1792))+(((-5.4612e-7)*x1789))+(((-1.0)*x1787*x1806)))))))+(((6189.23409961003)*(IKabs(((2.0)+(((-1.0)*x1819))+x1820)))))+(((6189.23409961003)*(IKabs(((1.05400000001629)+(((-1.0)*x1822))+x1821))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1823=(cj5*sj4);
IkReal x1824=(cj4*r22);
IkReal x1825=(cj5*r20);
IkReal x1826=(r20*sj5);
IkReal x1827=((9.36e-6)*cj4);
IkReal x1828=(r21*sj5);
IkReal x1829=(cj5*r21);
IkReal x1830=((3.12e-6)*cj4);
IkReal x1831=(r22*sj4);
IkReal x1832=(cj4*r12);
IkReal x1833=((1.332e-5)*x1832);
IkReal x1834=((1.476)*x1825);
IkReal x1835=((4.44e-6)*x1832);
IkReal x1836=((0.492)*x1825);
IkReal x1837=(r10*sj4*sj5);
IkReal x1838=(x1827*x1829);
IkReal x1839=(x1826*x1827);
IkReal x1840=((1.332e-5)*r11*x1823);
IkReal x1841=((1.332e-5)*x1837);
IkReal x1842=(x1826*x1830);
IkReal x1843=((4.44e-6)*x1837);
IkReal x1844=((4.44e-6)*r11*x1823);
IkReal x1845=(x1829*x1830);
IkReal x1846=((((6.324)*x1824))+(((12.0)*pz))+(((6.324)*sj4*x1826))+(((6.324)*r21*x1823))+(((1.476)*x1828))+(((9.36e-6)*x1831)));
IkReal x1847=((((3.12e-6)*x1831))+(((4.0)*pz))+(((0.492)*x1828))+(((2.108)*r21*x1823))+(((2.108)*sj4*x1826))+(((2.108)*x1824)));
IkReal x1848=(x1843+x1842+x1845+x1844+x1836+x1835);
IkReal x1849=(x1841+x1840+x1833+x1834+x1838+x1839);
op[0]=((2.0)+(((-1.0)*x1847))+x1848);
op[1]=-2.936e-5;
op[2]=((2.0)+(((-1.0)*x1846))+x1849);
op[3]=-5.872e-5;
op[4]=((-2.0)+(((-1.0)*x1846))+x1849);
op[5]=-2.936e-5;
op[6]=((-2.0)+(((-1.0)*x1847))+x1848);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1850=((2.108)*pz);
IkReal x1851=((4.44e-6)*py);
IkReal x1852=(cj5*r20);
IkReal x1853=(cj4*cj5);
IkReal x1854=(cj5*r10);
IkReal x1855=((3.33274800001479)*sj4);
IkReal x1856=(r20*sj5);
IkReal x1857=(cj5*r21);
IkReal x1858=(r12*sj4);
IkReal x1859=(r21*sj5);
IkReal x1860=(r11*sj5);
IkReal x1861=(cj4*r22);
IkReal x1862=(r22*sj4);
IkReal x1863=((1.11091600000493)*sj4);
IkReal x1864=((5.4612e-7)*x1854);
IkReal x1865=((0.259284)*x1852);
IkReal x1866=((0.777852)*x1852);
IkReal x1867=((1.63836e-6)*x1854);
IkReal x1868=((3.4632e-12)*x1858);
IkReal x1869=((5.4612e-7)*x1860);
IkReal x1870=((1.64424e-6)*x1862);
IkReal x1871=((0.259284)*x1859);
IkReal x1872=((1.11091600000493)*x1861);
IkReal x1873=(cj4*r10*sj5);
IkReal x1874=((3.4632e-12)*x1873);
IkReal x1875=((1.64424e-6)*r21*x1853);
IkReal x1876=((3.4632e-12)*r11*x1853);
IkReal x1877=((4.93272e-6)*cj4*x1856);
IkReal x1878=((4.93272e-6)*r21*x1853);
IkReal x1879=((1.03896e-11)*x1873);
IkReal x1880=((1.03896e-11)*r11*x1853);
IkReal x1881=((1.64424e-6)*cj4*x1856);
IkReal x1882=(x1856*x1863);
IkReal x1883=(x1857*x1863);
IkReal x1884=(x1865+x1864+x1876+x1874+x1875+x1881);
IkReal x1885=(x1867+x1866+x1877+x1878+x1879+x1880);
IkReal x1886=((((0.777852)*x1859))+(((1.03896e-11)*x1858))+(((4.93272e-6)*x1862))+(((6.324)*pz))+((x1855*x1856))+((x1855*x1857))+(((3.33274800001479)*x1861))+(((1.63836e-6)*x1860))+(((1.332e-5)*py)));
IkReal x1887=(x1869+x1868+x1850+x1851+x1872+x1870+x1871+x1883+x1882);
j1evalpoly[0]=((-1.05400000001629)+(((htj1*htj1)*(((-1.05400000001629)+x1885+(((-1.0)*x1886))))))+(((htj1*htj1*htj1*htj1)*(((1.05400000001629)+x1885+(((-1.0)*x1886))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.05400000001629)+x1884+(((-1.0)*x1887))))))+(((-2.206544e-5)*(htj1*htj1*htj1)))+(((-1.103272e-5)*htj1))+x1884+(((-1.0)*x1887))+(((-1.103272e-5)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1888=(cj4*r12);
IkReal x1889=((1.0)*sj1);
IkReal x1890=(cj4*r22);
IkReal x1891=(sj4*sj5);
IkReal x1892=(cj5*sj4);
IkReal x1893=(cj1*x1892);
if( IKabs((((r20*sj1*x1891))+((r11*x1893))+((r21*sj1*x1892))+((cj1*x1888))+((cj1*r10*x1891))+((sj1*x1890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1891))+(((-1.0)*x1888*x1889))+((cj1*x1890))+((r21*x1893))+(((-1.0)*r11*x1889*x1892))+(((-1.0)*r10*x1889*x1891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1891))+((r11*x1893))+((r21*sj1*x1892))+((cj1*x1888))+((cj1*r10*x1891))+((sj1*x1890))))+IKsqr((((cj1*r20*x1891))+(((-1.0)*x1888*x1889))+((cj1*x1890))+((r21*x1893))+(((-1.0)*r11*x1889*x1892))+(((-1.0)*r10*x1889*x1891))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1891))+((r11*x1893))+((r21*sj1*x1892))+((cj1*x1888))+((cj1*r10*x1891))+((sj1*x1890))), (((cj1*r20*x1891))+(((-1.0)*x1888*x1889))+((cj1*x1890))+((r21*x1893))+(((-1.0)*r11*x1889*x1892))+(((-1.0)*r10*x1889*x1891))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1894=IKsin(j2);
IkReal x1895=IKcos(j2);
IkReal x1896=(r21*sj5);
IkReal x1897=((1.0)*sj4);
IkReal x1898=(cj4*cj5);
IkReal x1899=((7.8e-7)*sj4);
IkReal x1900=((0.123)*cj5);
IkReal x1901=(r10*sj5);
IkReal x1902=(r20*sj5);
IkReal x1903=(cj3*cj4);
IkReal x1904=((1.0)*cj4);
IkReal x1905=(cj5*sj3);
IkReal x1906=((1.0)*sj3);
IkReal x1907=(r11*sj5);
IkReal x1908=((7.8e-7)*cj4);
IkReal x1909=(cj1*x1895);
IkReal x1910=(sj1*x1894);
IkReal x1911=(sj1*x1895);
IkReal x1912=(cj1*x1894);
IkReal x1913=(x1909+x1910);
evalcond[0]=((((-1.0)*r22*x1904))+x1913+(((-1.0)*cj5*r21*x1897))+(((-1.0)*x1897*x1902)));
evalcond[1]=((((-1.0)*cj5*r11*x1897))+(((-1.0)*x1911))+x1912+(((-1.0)*r12*x1904))+(((-1.0)*x1897*x1901)));
evalcond[2]=(((x1901*x1903))+((cj3*r11*x1898))+(((-1.0)*cj3*r12*x1897))+x1913+(((-1.0)*x1906*x1907))+((r10*x1905)));
evalcond[3]=(((cj3*r21*x1898))+(((-1.0)*x1912))+x1911+(((-1.0)*x1896*x1906))+((x1902*x1903))+((r20*x1905))+(((-1.0)*cj3*r22*x1897)));
evalcond[4]=((((-0.527)*x1910))+(((-1.11e-6)*x1911))+(((-3.67e-6)*sj1))+(((-0.123)*x1896))+(((7.8e-7)*r21*x1898))+(((-1.0)*r22*x1899))+(((-1.0)*pz))+(((1.11e-6)*x1912))+(((-0.5)*cj1))+((x1902*x1908))+(((-0.527)*x1909))+((r20*x1900)));
evalcond[5]=((((-0.527)*x1912))+(((-1.11e-6)*x1909))+((x1901*x1908))+(((-1.11e-6)*x1910))+(((-0.123)*x1907))+(((0.5)*sj1))+(((7.8e-7)*r11*x1898))+(((-1.0)*py))+(((-1.0)*r12*x1899))+(((-3.67e-6)*cj1))+(((0.527)*x1911))+((r10*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1914=((1.0)*sj4);
IkReal x1915=(cj5*sj0);
IkReal x1916=(cj0*sj5);
IkReal x1917=(sj0*sj5);
IkReal x1918=((1.0)*cj4);
IkReal x1919=(cj0*cj5);
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal((((r00*x1915))+(((-1.0)*r10*x1919))+((r11*x1916))+(((-1.0)*r01*x1917)))),IkReal(((((-1.0)*r11*x1918*x1919))+((cj4*r01*x1915))+(((-1.0)*r02*sj0*x1914))+((cj4*r00*x1917))+((cj0*r12*sj4))+(((-1.0)*r10*x1916*x1918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
CheckValue<IkReal> x1921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x1914))+(((-1.0)*r22*x1918))+(((-1.0)*cj5*r21*x1914)))),-1);
if(!x1921.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1920.value)+(((1.5707963267949)*(x1921.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1922=IKsin(j3);
IkReal x1923=IKcos(j3);
IkReal x1924=((1.0)*sj5);
IkReal x1925=((1.0)*cj5);
IkReal x1926=(cj5*x1923);
IkReal x1927=(sj4*x1922);
IkReal x1928=(cj4*x1922);
evalcond[0]=((((-1.0)*r21*x1925*x1928))+((r22*x1927))+(((-1.0)*r21*x1923*x1924))+((r20*x1926))+(((-1.0)*r20*x1924*x1928)));
evalcond[1]=(((r00*x1926))+(((-1.0)*r01*x1925*x1928))+(((-1.0)*r01*x1923*x1924))+((r02*x1927))+(((-1.0)*r00*x1924*x1928))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r11*x1925*x1928))+(((-1.0)*sj0))+(((-1.0)*r11*x1923*x1924))+(((-1.0)*r10*x1924*x1928))+((r10*x1926))+((r12*x1927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=((((8514.9863760218)*(IKabs(((((4.44e-6)*cj5*r01*sj4))+(((4.44e-6)*r00*sj4*sj5))+(((0.492)*cj5*r20*sj0))+(((4.44e-6)*cj4*r02))+(((3.12e-6)*cj4*r20*sj0*sj5))+(((-0.492)*r21*sj0*sj5))+(((-2.108)*cj4*r22*sj0))+(((-3.12e-6)*r22*sj0*sj4))+(((-2.108)*cj5*r21*sj0*sj4))+(((-2.108)*r20*sj0*sj4*sj5))+(((2.0)*sj0))+(((-4.0)*pz*sj0))+(((3.12e-6)*cj4*cj5*r21*sj0)))))))+(((8514.9863760218)*(IKabs(((((1.332e-5)*r00*sj4*sj5))+(((1.476)*cj5*r20*sj0))+(((1.332e-5)*cj4*r02))+(((9.36e-6)*cj4*r20*sj0*sj5))+(((-1.476)*r21*sj0*sj5))+(((-12.0)*pz*sj0))+(((-9.36e-6)*r22*sj0*sj4))+(((-6.324)*r20*sj0*sj4*sj5))+(((1.332e-5)*cj5*r01*sj4))+(((9.36e-6)*cj4*cj5*r21*sj0))+(((-6.324)*cj5*r21*sj0*sj4))+(((-2.0)*sj0))+(((-6.324)*cj4*r22*sj0)))))))+(((8514.9863760218)*(IKabs(((((1.332e-5)*r00*sj4*sj5))+(((1.476)*cj5*r20*sj0))+(((1.332e-5)*cj4*r02))+(((9.36e-6)*cj4*r20*sj0*sj5))+(((-1.476)*r21*sj0*sj5))+(((-12.0)*pz*sj0))+(((-9.36e-6)*r22*sj0*sj4))+(((-6.324)*r20*sj0*sj4*sj5))+(((1.332e-5)*cj5*r01*sj4))+(((9.36e-6)*cj4*cj5*r21*sj0))+(((-6.324)*cj5*r21*sj0*sj4))+(((-6.324)*cj4*r22*sj0))+(((2.0)*sj0)))))))+(((8514.9863760218)*(IKabs(((((-1.476)*cj0*cj5*r20))+(((2.0)*cj0))+(((6.324)*cj0*r20*sj4*sj5))+(((1.332e-5)*cj4*r12))+(((-9.36e-6)*cj0*cj4*cj5*r21))+(((-9.36e-6)*cj0*cj4*r20*sj5))+(((1.476)*cj0*r21*sj5))+(((1.332e-5)*cj5*r11*sj4))+(((12.0)*cj0*pz))+(((6.324)*cj0*cj4*r22))+(((9.36e-6)*cj0*r22*sj4))+(((1.332e-5)*r10*sj4*sj5))+(((6.324)*cj0*cj5*r21*sj4)))))))+(IKabs(cj0))+(((8514.9863760218)*(IKabs(((((-1.476)*cj0*cj5*r20))+(((6.324)*cj0*r20*sj4*sj5))+(((1.332e-5)*cj4*r12))+(((-9.36e-6)*cj0*cj4*cj5*r21))+(((-9.36e-6)*cj0*cj4*r20*sj5))+(((1.476)*cj0*r21*sj5))+(((1.332e-5)*cj5*r11*sj4))+(((-2.0)*cj0))+(((12.0)*cj0*pz))+(((6.324)*cj0*cj4*r22))+(((9.36e-6)*cj0*r22*sj4))+(((1.332e-5)*r10*sj4*sj5))+(((6.324)*cj0*cj5*r21*sj4)))))))+(IKabs(sj0))+(((8514.9863760218)*(IKabs(((((3.12e-6)*cj0*r22*sj4))+(((4.0)*cj0*pz))+(((-3.12e-6)*cj0*cj4*r20*sj5))+(((2.108)*cj0*r20*sj4*sj5))+(((4.44e-6)*cj4*r12))+(((2.108)*cj0*cj4*r22))+(((2.108)*cj0*cj5*r21*sj4))+(((-2.0)*cj0))+(((4.44e-6)*r10*sj4*sj5))+(((-0.492)*cj0*cj5*r20))+(((4.44e-6)*cj5*r11*sj4))+(((-3.12e-6)*cj0*cj4*cj5*r21))+(((0.492)*cj0*r21*sj5))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1929=((2.0)*sj0);
IkReal x1930=(sj0*sj4);
IkReal x1931=(r20*sj5);
IkReal x1932=(cj4*sj0);
IkReal x1933=(cj5*r21);
IkReal x1934=(cj4*r02);
IkReal x1935=((1.476)*sj0);
IkReal x1936=(r21*sj5);
IkReal x1937=(cj5*r20);
IkReal x1938=(pz*sj0);
IkReal x1939=((0.492)*sj0);
IkReal x1940=((1.332e-5)*x1934);
IkReal x1941=((12.0)*x1938);
IkReal x1942=((-2.936e-5)*sj0);
IkReal x1943=((4.44e-6)*x1934);
IkReal x1944=((4.0)*x1938);
IkReal x1945=(cj5*r01*sj4);
IkReal x1946=(r00*sj4*sj5);
IkReal x1947=((1.332e-5)*x1946);
IkReal x1948=(x1935*x1937);
IkReal x1949=((1.332e-5)*x1945);
IkReal x1950=((9.36e-6)*r22*x1930);
IkReal x1951=(x1935*x1936);
IkReal x1952=((6.324)*r22*x1932);
IkReal x1953=((4.44e-6)*x1945);
IkReal x1954=((4.44e-6)*x1946);
IkReal x1955=(x1937*x1939);
IkReal x1956=((3.12e-6)*r22*x1930);
IkReal x1957=((2.108)*r22*x1932);
IkReal x1958=(x1936*x1939);
IkReal x1959=((9.36e-6)*x1931*x1932);
IkReal x1960=((9.36e-6)*x1932*x1933);
IkReal x1961=((6.324)*x1930*x1933);
IkReal x1962=((6.324)*x1930*x1931);
IkReal x1963=((3.12e-6)*x1931*x1932);
IkReal x1964=((3.12e-6)*x1932*x1933);
IkReal x1965=((2.108)*x1930*x1933);
IkReal x1966=((2.108)*x1930*x1931);
IkReal x1967=(x1964+x1963+x1943+x1955+x1954+x1953);
IkReal x1968=(x1965+x1966+x1944+x1957+x1956+x1958);
IkReal x1969=(x1961+x1962+x1941+x1951+x1950+x1952);
IkReal x1970=(x1960+x1948+x1949+x1940+x1947+x1959);
op[0]=((((-1.0)*x1968))+x1929+x1967);
op[1]=x1942;
op[2]=((((-1.0)*x1969))+x1929+x1970);
op[3]=((-5.872e-5)*sj0);
op[4]=((((-1.0)*x1969))+(((-1.0)*x1929))+x1970);
op[5]=x1942;
op[6]=((((-1.0)*x1968))+(((-1.0)*x1929))+x1967);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1971=((2.0)*cj0);
IkReal x1972=(cj0*sj4);
IkReal x1973=(r20*sj5);
IkReal x1974=(cj0*cj4);
IkReal x1975=((1.332e-5)*sj4);
IkReal x1976=(cj5*r11);
IkReal x1977=(cj5*r21);
IkReal x1978=(r10*sj5);
IkReal x1979=((4.44e-6)*sj4);
IkReal x1980=((2.936e-5)*cj0);
IkReal x1981=(cj4*r12);
IkReal x1982=(cj0*pz);
IkReal x1983=((4.0)*x1982);
IkReal x1984=((4.44e-6)*x1981);
IkReal x1985=((1.332e-5)*x1981);
IkReal x1986=((12.0)*x1982);
IkReal x1987=(cj0*r21*sj5);
IkReal x1988=(cj0*cj5*r20);
IkReal x1989=((3.12e-6)*r22*x1972);
IkReal x1990=((2.108)*r22*x1974);
IkReal x1991=((1.476)*x1987);
IkReal x1992=(x1975*x1976);
IkReal x1993=((6.324)*r22*x1974);
IkReal x1994=((9.36e-6)*r22*x1972);
IkReal x1995=(x1975*x1978);
IkReal x1996=((1.476)*x1988);
IkReal x1997=(x1978*x1979);
IkReal x1998=(x1976*x1979);
IkReal x1999=((0.492)*x1987);
IkReal x2000=((0.492)*x1988);
IkReal x2001=((2.108)*x1972*x1973);
IkReal x2002=((2.108)*x1972*x1977);
IkReal x2003=((6.324)*x1972*x1973);
IkReal x2004=((6.324)*x1972*x1977);
IkReal x2005=((9.36e-6)*x1973*x1974);
IkReal x2006=((9.36e-6)*x1974*x1977);
IkReal x2007=((3.12e-6)*x1973*x1974);
IkReal x2008=((3.12e-6)*x1974*x1977);
IkReal x2009=(x2006+x2005+x1996);
IkReal x2010=(x2000+x2007+x2008);
IkReal x2011=(x2002+x2001+x1984+x1983+x1989+x1990+x1997+x1999+x1998);
IkReal x2012=(x2003+x2004+x1986+x1985+x1991+x1993+x1992+x1995+x1994);
j1evalpoly[0]=((((-1.0)*x2010))+(((5.872e-5)*cj0*(htj1*htj1*htj1)))+x2011+(((htj1*htj1*htj1*htj1)*((x2012+(((-1.0)*x1971))+(((-1.0)*x2009))))))+(((htj1*htj1)*((x2012+x1971+(((-1.0)*x2009))))))+x1971+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2010))+x2011+(((-1.0)*x1971))))))+((x1980*(htj1*htj1*htj1*htj1*htj1)))+((htj1*x1980)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2013=(sj1*sj3);
IkReal x2014=(r21*sj5);
IkReal x2015=(cj5*r20);
IkReal x2016=(cj1*cj3);
IkReal x2017=(r22*sj4);
IkReal x2018=(r20*sj5);
IkReal x2019=(cj5*r21);
IkReal x2020=(cj4*r22);
IkReal x2021=(cj1*sj3);
IkReal x2022=(cj1*sj4);
IkReal x2023=(sj1*sj4);
IkReal x2024=(cj3*sj1);
IkReal x2025=((1.0)*cj4);
if( IKabs(((((-1.0)*x2016*x2017))+((x2019*x2023))+((x2018*x2023))+(((-1.0)*x2014*x2021))+((sj1*x2020))+((cj4*x2016*x2018))+((cj4*x2016*x2019))+((x2015*x2021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2017*x2024))+((x2019*x2022))+((x2018*x2022))+(((-1.0)*x2019*x2024*x2025))+((cj1*x2020))+(((-1.0)*x2018*x2024*x2025))+((x2013*x2014))+(((-1.0)*x2013*x2015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2016*x2017))+((x2019*x2023))+((x2018*x2023))+(((-1.0)*x2014*x2021))+((sj1*x2020))+((cj4*x2016*x2018))+((cj4*x2016*x2019))+((x2015*x2021))))+IKsqr((((x2017*x2024))+((x2019*x2022))+((x2018*x2022))+(((-1.0)*x2019*x2024*x2025))+((cj1*x2020))+(((-1.0)*x2018*x2024*x2025))+((x2013*x2014))+(((-1.0)*x2013*x2015))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2016*x2017))+((x2019*x2023))+((x2018*x2023))+(((-1.0)*x2014*x2021))+((sj1*x2020))+((cj4*x2016*x2018))+((cj4*x2016*x2019))+((x2015*x2021))), (((x2017*x2024))+((x2019*x2022))+((x2018*x2022))+(((-1.0)*x2019*x2024*x2025))+((cj1*x2020))+(((-1.0)*x2018*x2024*x2025))+((x2013*x2014))+(((-1.0)*x2013*x2015))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2026=IKsin(j2);
IkReal x2027=IKcos(j2);
IkReal x2028=(cj5*r00);
IkReal x2029=(cj3*cj4);
IkReal x2030=(r00*sj5);
IkReal x2031=((1.11e-6)*cj0);
IkReal x2032=((7.8e-7)*sj4);
IkReal x2033=((1.0)*cj0);
IkReal x2034=(r21*sj5);
IkReal x2035=((0.123)*cj5);
IkReal x2036=((1.0)*sj4);
IkReal x2037=(r10*sj5);
IkReal x2038=(cj5*r21);
IkReal x2039=((0.5)*sj1);
IkReal x2040=(r20*sj5);
IkReal x2041=((1.0)*cj4);
IkReal x2042=(cj5*sj3);
IkReal x2043=((1.0)*sj3);
IkReal x2044=(r11*sj5);
IkReal x2045=((1.11e-6)*sj0);
IkReal x2046=(r01*sj5);
IkReal x2047=((0.527)*cj0);
IkReal x2048=((3.67e-6)*cj1);
IkReal x2049=(cj5*r01);
IkReal x2050=((7.8e-7)*cj4);
IkReal x2051=(cj5*r11);
IkReal x2052=(cj1*x2027);
IkReal x2053=(cj3*x2036);
IkReal x2054=(sj1*x2026);
IkReal x2055=(cj5*x2050);
IkReal x2056=(cj1*x2026);
IkReal x2057=(sj1*x2027);
IkReal x2058=(sj0*x2057);
evalcond[0]=((((-1.0)*x2036*x2038))+(((-1.0)*r22*x2041))+x2052+x2054+(((-1.0)*x2036*x2040)));
evalcond[1]=((((-1.0)*r02*x2041))+(((-1.0)*x2058))+((sj0*x2056))+(((-1.0)*x2030*x2036))+(((-1.0)*x2036*x2049)));
evalcond[2]=((((-1.0)*x2036*x2037))+((cj0*x2057))+(((-1.0)*x2033*x2056))+(((-1.0)*x2036*x2051))+(((-1.0)*r12*x2041)));
evalcond[3]=(x2057+((r20*x2042))+(((-1.0)*r22*x2053))+(((-1.0)*x2056))+((x2029*x2040))+(((-1.0)*x2034*x2043))+((x2029*x2038)));
evalcond[4]=(((sj3*x2028))+((sj0*x2054))+((sj0*x2052))+(((-1.0)*r02*x2053))+((x2029*x2049))+(((-1.0)*x2043*x2046))+((x2029*x2030)));
evalcond[5]=((((-1.0)*r12*x2053))+(((-1.0)*x2043*x2044))+((r10*x2042))+((x2029*x2037))+(((-1.0)*x2033*x2052))+(((-1.0)*x2033*x2054))+((x2029*x2051)));
evalcond[6]=((((-1.0)*r22*x2032))+(((-3.67e-6)*sj1))+((x2040*x2050))+((x2038*x2050))+(((-0.123)*x2034))+(((-1.11e-6)*x2057))+(((-1.0)*pz))+(((1.11e-6)*x2056))+((r20*x2035))+(((-0.5)*cj1))+(((-0.527)*x2054))+(((-0.527)*x2052)));
evalcond[7]=(((x2030*x2050))+(((-1.0)*sj0*x2048))+(((-0.527)*sj0*x2056))+(((-1.0)*x2045*x2054))+(((-1.0)*x2045*x2052))+(((0.123)*x2028))+((x2049*x2050))+(((0.058999)*cj0))+(((-1.0)*px))+(((-1.0)*r02*x2032))+(((-0.123)*x2046))+((sj0*x2039))+(((0.527)*x2058)));
evalcond[8]=(((r10*x2035))+((cj0*x2048))+(((-1.0)*r12*x2032))+((x2031*x2054))+((x2031*x2052))+((x2047*x2056))+(((-1.0)*py))+(((0.058999)*sj0))+(((-0.123)*x2044))+((x2037*x2050))+((x2050*x2051))+(((-1.0)*cj0*x2039))+(((-1.0)*x2047*x2057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2059=((1.0)*sj5);
IkReal x2060=(cj0*r21);
IkReal x2061=((1.0)*sj4);
IkReal x2062=(cj0*r20);
CheckValue<IkReal> x2063=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11*x2061))+(((-1.0)*r10*sj4*x2059))+(((-1.0)*cj4*r12)))),-1);
if(!x2063.valid){
continue;
}
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal((((cj5*x2062))+(((-1.0)*x2059*x2060)))),IkReal(((((-1.0)*cj0*r22*x2061))+((cj4*cj5*x2060))+((cj4*sj5*x2062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2063.value)))+(x2064.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2065=IKsin(j3);
IkReal x2066=IKcos(j3);
IkReal x2067=((1.0)*sj5);
IkReal x2068=((1.0)*cj5);
IkReal x2069=(cj5*x2066);
IkReal x2070=(sj4*x2065);
IkReal x2071=(cj4*x2065);
evalcond[0]=(((r22*x2070))+(((-1.0)*r21*x2066*x2067))+((r20*x2069))+(((-1.0)*r21*x2068*x2071))+(((-1.0)*r20*x2067*x2071)));
evalcond[1]=((((-1.0)*r01*x2066*x2067))+(((-1.0)*r00*x2067*x2071))+((r02*x2070))+((r00*x2069))+(((-1.0)*r01*x2068*x2071))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*sj0))+((r12*x2070))+(((-1.0)*r11*x2066*x2067))+(((-1.0)*r11*x2068*x2071))+((r10*x2069))+(((-1.0)*r10*x2067*x2071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=((((8514.9863760218)*(IKabs(((((4.44e-6)*cj5*r01*sj4))+(((4.44e-6)*r00*sj4*sj5))+(((0.492)*cj5*r20*sj0))+(((4.44e-6)*cj4*r02))+(((3.12e-6)*cj4*r20*sj0*sj5))+(((-0.492)*r21*sj0*sj5))+(((-2.108)*cj4*r22*sj0))+(((-3.12e-6)*r22*sj0*sj4))+(((-2.108)*cj5*r21*sj0*sj4))+(((-2.108)*r20*sj0*sj4*sj5))+(((2.0)*sj0))+(((-4.0)*pz*sj0))+(((3.12e-6)*cj4*cj5*r21*sj0)))))))+(((8514.9863760218)*(IKabs(((((1.332e-5)*r00*sj4*sj5))+(((1.476)*cj5*r20*sj0))+(((1.332e-5)*cj4*r02))+(((9.36e-6)*cj4*r20*sj0*sj5))+(((-1.476)*r21*sj0*sj5))+(((-12.0)*pz*sj0))+(((-9.36e-6)*r22*sj0*sj4))+(((-6.324)*r20*sj0*sj4*sj5))+(((1.332e-5)*cj5*r01*sj4))+(((9.36e-6)*cj4*cj5*r21*sj0))+(((-6.324)*cj5*r21*sj0*sj4))+(((-2.0)*sj0))+(((-6.324)*cj4*r22*sj0)))))))+(((8514.9863760218)*(IKabs(((((1.332e-5)*r00*sj4*sj5))+(((1.476)*cj5*r20*sj0))+(((1.332e-5)*cj4*r02))+(((9.36e-6)*cj4*r20*sj0*sj5))+(((-1.476)*r21*sj0*sj5))+(((-12.0)*pz*sj0))+(((-9.36e-6)*r22*sj0*sj4))+(((-6.324)*r20*sj0*sj4*sj5))+(((1.332e-5)*cj5*r01*sj4))+(((9.36e-6)*cj4*cj5*r21*sj0))+(((-6.324)*cj5*r21*sj0*sj4))+(((-6.324)*cj4*r22*sj0))+(((2.0)*sj0)))))))+(((8514.9863760218)*(IKabs(((((-1.476)*cj0*cj5*r20))+(((2.0)*cj0))+(((6.324)*cj0*r20*sj4*sj5))+(((1.332e-5)*cj4*r12))+(((-9.36e-6)*cj0*cj4*cj5*r21))+(((-9.36e-6)*cj0*cj4*r20*sj5))+(((1.476)*cj0*r21*sj5))+(((1.332e-5)*cj5*r11*sj4))+(((12.0)*cj0*pz))+(((6.324)*cj0*cj4*r22))+(((9.36e-6)*cj0*r22*sj4))+(((1.332e-5)*r10*sj4*sj5))+(((6.324)*cj0*cj5*r21*sj4)))))))+(IKabs(cj0))+(((8514.9863760218)*(IKabs(((((-1.476)*cj0*cj5*r20))+(((6.324)*cj0*r20*sj4*sj5))+(((1.332e-5)*cj4*r12))+(((-9.36e-6)*cj0*cj4*cj5*r21))+(((-9.36e-6)*cj0*cj4*r20*sj5))+(((1.476)*cj0*r21*sj5))+(((1.332e-5)*cj5*r11*sj4))+(((-2.0)*cj0))+(((12.0)*cj0*pz))+(((6.324)*cj0*cj4*r22))+(((9.36e-6)*cj0*r22*sj4))+(((1.332e-5)*r10*sj4*sj5))+(((6.324)*cj0*cj5*r21*sj4)))))))+(IKabs(sj0))+(((8514.9863760218)*(IKabs(((((3.12e-6)*cj0*r22*sj4))+(((4.0)*cj0*pz))+(((-3.12e-6)*cj0*cj4*r20*sj5))+(((2.108)*cj0*r20*sj4*sj5))+(((4.44e-6)*cj4*r12))+(((2.108)*cj0*cj4*r22))+(((2.108)*cj0*cj5*r21*sj4))+(((-2.0)*cj0))+(((4.44e-6)*r10*sj4*sj5))+(((-0.492)*cj0*cj5*r20))+(((4.44e-6)*cj5*r11*sj4))+(((-3.12e-6)*cj0*cj4*cj5*r21))+(((0.492)*cj0*r21*sj5))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2072=((2.0)*sj0);
IkReal x2073=(sj0*sj4);
IkReal x2074=(r20*sj5);
IkReal x2075=(cj4*sj0);
IkReal x2076=(cj5*r21);
IkReal x2077=(cj4*r02);
IkReal x2078=((1.476)*sj0);
IkReal x2079=(r21*sj5);
IkReal x2080=(cj5*r20);
IkReal x2081=(pz*sj0);
IkReal x2082=((0.492)*sj0);
IkReal x2083=((1.332e-5)*x2077);
IkReal x2084=((12.0)*x2081);
IkReal x2085=((-2.936e-5)*sj0);
IkReal x2086=((4.44e-6)*x2077);
IkReal x2087=((4.0)*x2081);
IkReal x2088=(cj5*r01*sj4);
IkReal x2089=(r00*sj4*sj5);
IkReal x2090=((1.332e-5)*x2089);
IkReal x2091=(x2078*x2080);
IkReal x2092=((1.332e-5)*x2088);
IkReal x2093=((9.36e-6)*r22*x2073);
IkReal x2094=(x2078*x2079);
IkReal x2095=((6.324)*r22*x2075);
IkReal x2096=((4.44e-6)*x2088);
IkReal x2097=((4.44e-6)*x2089);
IkReal x2098=(x2080*x2082);
IkReal x2099=((3.12e-6)*r22*x2073);
IkReal x2100=((2.108)*r22*x2075);
IkReal x2101=(x2079*x2082);
IkReal x2102=((9.36e-6)*x2074*x2075);
IkReal x2103=((9.36e-6)*x2075*x2076);
IkReal x2104=((6.324)*x2073*x2076);
IkReal x2105=((6.324)*x2073*x2074);
IkReal x2106=((3.12e-6)*x2074*x2075);
IkReal x2107=((3.12e-6)*x2075*x2076);
IkReal x2108=((2.108)*x2073*x2076);
IkReal x2109=((2.108)*x2073*x2074);
IkReal x2110=(x2097+x2096+x2098+x2086+x2107+x2106);
IkReal x2111=(x2099+x2087+x2109+x2108+x2101+x2100);
IkReal x2112=(x2095+x2094+x2093+x2084+x2105+x2104);
IkReal x2113=(x2091+x2090+x2092+x2083+x2103+x2102);
op[0]=(x2072+x2110+(((-1.0)*x2111)));
op[1]=x2085;
op[2]=(x2072+x2113+(((-1.0)*x2112)));
op[3]=((-5.872e-5)*sj0);
op[4]=(x2113+(((-1.0)*x2072))+(((-1.0)*x2112)));
op[5]=x2085;
op[6]=(x2110+(((-1.0)*x2072))+(((-1.0)*x2111)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2114=((2.0)*cj0);
IkReal x2115=(cj0*sj4);
IkReal x2116=(r20*sj5);
IkReal x2117=(cj0*cj4);
IkReal x2118=((1.332e-5)*sj4);
IkReal x2119=(cj5*r11);
IkReal x2120=(cj5*r21);
IkReal x2121=(r10*sj5);
IkReal x2122=((4.44e-6)*sj4);
IkReal x2123=((2.936e-5)*cj0);
IkReal x2124=(cj4*r12);
IkReal x2125=(cj0*pz);
IkReal x2126=((4.0)*x2125);
IkReal x2127=((4.44e-6)*x2124);
IkReal x2128=((1.332e-5)*x2124);
IkReal x2129=((12.0)*x2125);
IkReal x2130=(cj0*r21*sj5);
IkReal x2131=(cj0*cj5*r20);
IkReal x2132=((3.12e-6)*r22*x2115);
IkReal x2133=((2.108)*r22*x2117);
IkReal x2134=((1.476)*x2130);
IkReal x2135=(x2118*x2119);
IkReal x2136=((6.324)*r22*x2117);
IkReal x2137=((9.36e-6)*r22*x2115);
IkReal x2138=(x2118*x2121);
IkReal x2139=((1.476)*x2131);
IkReal x2140=(x2121*x2122);
IkReal x2141=(x2119*x2122);
IkReal x2142=((0.492)*x2130);
IkReal x2143=((0.492)*x2131);
IkReal x2144=((2.108)*x2115*x2116);
IkReal x2145=((2.108)*x2115*x2120);
IkReal x2146=((6.324)*x2115*x2116);
IkReal x2147=((6.324)*x2115*x2120);
IkReal x2148=((9.36e-6)*x2116*x2117);
IkReal x2149=((9.36e-6)*x2117*x2120);
IkReal x2150=((3.12e-6)*x2116*x2117);
IkReal x2151=((3.12e-6)*x2117*x2120);
IkReal x2152=(x2139+x2149+x2148);
IkReal x2153=(x2150+x2151+x2143);
IkReal x2154=(x2127+x2126+x2132+x2133+x2145+x2144+x2142+x2141+x2140);
IkReal x2155=(x2129+x2128+x2136+x2137+x2134+x2135+x2138+x2147+x2146);
j1evalpoly[0]=((((htj1*htj1)*((x2114+x2155+(((-1.0)*x2152))))))+(((5.872e-5)*cj0*(htj1*htj1*htj1)))+x2114+x2154+(((-1.0)*x2153))+((htj1*x2123))+((x2123*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2154+(((-1.0)*x2153))+(((-1.0)*x2114))))))+(((htj1*htj1*htj1*htj1)*((x2155+(((-1.0)*x2152))+(((-1.0)*x2114)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2156=(sj1*sj3);
IkReal x2157=(r21*sj5);
IkReal x2158=(cj5*r20);
IkReal x2159=(cj1*cj3);
IkReal x2160=(r22*sj4);
IkReal x2161=(r20*sj5);
IkReal x2162=(cj5*r21);
IkReal x2163=(cj4*r22);
IkReal x2164=(cj1*sj3);
IkReal x2165=(cj1*sj4);
IkReal x2166=(sj1*sj4);
IkReal x2167=(cj3*sj1);
IkReal x2168=((1.0)*cj4);
if( IKabs((((sj1*x2163))+(((-1.0)*x2157*x2164))+((cj4*x2159*x2162))+((cj4*x2159*x2161))+((x2161*x2166))+((x2162*x2166))+((x2158*x2164))+(((-1.0)*x2159*x2160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2162*x2167*x2168))+(((-1.0)*x2156*x2158))+((x2156*x2157))+((x2161*x2165))+((x2162*x2165))+((cj1*x2163))+(((-1.0)*x2161*x2167*x2168))+((x2160*x2167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2163))+(((-1.0)*x2157*x2164))+((cj4*x2159*x2162))+((cj4*x2159*x2161))+((x2161*x2166))+((x2162*x2166))+((x2158*x2164))+(((-1.0)*x2159*x2160))))+IKsqr(((((-1.0)*x2162*x2167*x2168))+(((-1.0)*x2156*x2158))+((x2156*x2157))+((x2161*x2165))+((x2162*x2165))+((cj1*x2163))+(((-1.0)*x2161*x2167*x2168))+((x2160*x2167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2163))+(((-1.0)*x2157*x2164))+((cj4*x2159*x2162))+((cj4*x2159*x2161))+((x2161*x2166))+((x2162*x2166))+((x2158*x2164))+(((-1.0)*x2159*x2160))), ((((-1.0)*x2162*x2167*x2168))+(((-1.0)*x2156*x2158))+((x2156*x2157))+((x2161*x2165))+((x2162*x2165))+((cj1*x2163))+(((-1.0)*x2161*x2167*x2168))+((x2160*x2167))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2169=IKsin(j2);
IkReal x2170=IKcos(j2);
IkReal x2171=(cj5*r00);
IkReal x2172=(cj3*cj4);
IkReal x2173=(r00*sj5);
IkReal x2174=((1.11e-6)*cj0);
IkReal x2175=((7.8e-7)*sj4);
IkReal x2176=((1.0)*cj0);
IkReal x2177=(r21*sj5);
IkReal x2178=((0.123)*cj5);
IkReal x2179=((1.0)*sj4);
IkReal x2180=(r10*sj5);
IkReal x2181=(cj5*r21);
IkReal x2182=((0.5)*sj1);
IkReal x2183=(r20*sj5);
IkReal x2184=((1.0)*cj4);
IkReal x2185=(cj5*sj3);
IkReal x2186=((1.0)*sj3);
IkReal x2187=(r11*sj5);
IkReal x2188=((1.11e-6)*sj0);
IkReal x2189=(r01*sj5);
IkReal x2190=((0.527)*cj0);
IkReal x2191=((3.67e-6)*cj1);
IkReal x2192=(cj5*r01);
IkReal x2193=((7.8e-7)*cj4);
IkReal x2194=(cj5*r11);
IkReal x2195=(cj1*x2170);
IkReal x2196=(cj3*x2179);
IkReal x2197=(sj1*x2169);
IkReal x2198=(cj5*x2193);
IkReal x2199=(cj1*x2169);
IkReal x2200=(sj1*x2170);
IkReal x2201=(sj0*x2200);
evalcond[0]=(x2195+x2197+(((-1.0)*r22*x2184))+(((-1.0)*x2179*x2183))+(((-1.0)*x2179*x2181)));
evalcond[1]=((((-1.0)*x2201))+((sj0*x2199))+(((-1.0)*r02*x2184))+(((-1.0)*x2179*x2192))+(((-1.0)*x2173*x2179)));
evalcond[2]=((((-1.0)*x2179*x2194))+((cj0*x2200))+(((-1.0)*x2179*x2180))+(((-1.0)*x2176*x2199))+(((-1.0)*r12*x2184)));
evalcond[3]=(x2200+((x2172*x2183))+((x2172*x2181))+(((-1.0)*x2199))+((r20*x2185))+(((-1.0)*x2177*x2186))+(((-1.0)*r22*x2196)));
evalcond[4]=(((x2172*x2173))+((x2172*x2192))+((sj0*x2197))+((sj0*x2195))+(((-1.0)*x2186*x2189))+((sj3*x2171))+(((-1.0)*r02*x2196)));
evalcond[5]=(((x2172*x2194))+((x2172*x2180))+(((-1.0)*x2186*x2187))+(((-1.0)*r12*x2196))+(((-1.0)*x2176*x2195))+(((-1.0)*x2176*x2197))+((r10*x2185)));
evalcond[6]=((((1.11e-6)*x2199))+(((-3.67e-6)*sj1))+((x2183*x2193))+(((-1.0)*pz))+((x2181*x2193))+((r20*x2178))+(((-0.5)*cj1))+(((-1.11e-6)*x2200))+(((-1.0)*r22*x2175))+(((-0.123)*x2177))+(((-0.527)*x2197))+(((-0.527)*x2195)));
evalcond[7]=(((x2192*x2193))+(((-1.0)*x2188*x2197))+(((-1.0)*x2188*x2195))+(((-0.123)*x2189))+((sj0*x2182))+(((0.058999)*cj0))+(((-1.0)*px))+(((0.123)*x2171))+(((-1.0)*r02*x2175))+(((-1.0)*sj0*x2191))+(((0.527)*x2201))+(((-0.527)*sj0*x2199))+((x2173*x2193)));
evalcond[8]=(((x2193*x2194))+(((-1.0)*x2190*x2200))+(((-1.0)*cj0*x2182))+(((-0.123)*x2187))+((x2180*x2193))+((x2190*x2199))+(((-1.0)*py))+(((0.058999)*sj0))+((r10*x2178))+((x2174*x2197))+((x2174*x2195))+((cj0*x2191))+(((-1.0)*r12*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2202=(r20*sj0);
IkReal x2203=(r21*sj0);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal((((cj5*x2202))+(((-1.0)*sj5*x2203)))),IkReal((((cj4*sj5*x2202))+((cj4*cj5*x2203))+(((-1.0)*r22*sj0*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x2205.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2204.value)+(((1.5707963267949)*(x2205.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2206=IKsin(j3);
IkReal x2207=IKcos(j3);
IkReal x2208=((1.0)*sj5);
IkReal x2209=((1.0)*cj5);
IkReal x2210=(cj5*x2207);
IkReal x2211=(sj4*x2206);
IkReal x2212=(cj4*x2206);
evalcond[0]=(((r20*x2210))+(((-1.0)*r21*x2207*x2208))+(((-1.0)*r21*x2209*x2212))+(((-1.0)*r20*x2208*x2212))+((r22*x2211)));
evalcond[1]=(((r00*x2210))+(((-1.0)*r01*x2209*x2212))+(((-1.0)*r00*x2208*x2212))+(((-1.0)*r01*x2207*x2208))+((r02*x2211))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r11*x2209*x2212))+((r12*x2211))+(((-1.0)*r11*x2207*x2208))+((r10*x2210))+(((-1.0)*r10*x2208*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=((((8514.9863760218)*(IKabs(((((4.44e-6)*cj5*r01*sj4))+(((4.44e-6)*r00*sj4*sj5))+(((0.492)*cj5*r20*sj0))+(((4.44e-6)*cj4*r02))+(((3.12e-6)*cj4*r20*sj0*sj5))+(((-0.492)*r21*sj0*sj5))+(((-2.108)*cj4*r22*sj0))+(((-3.12e-6)*r22*sj0*sj4))+(((-2.108)*cj5*r21*sj0*sj4))+(((-2.108)*r20*sj0*sj4*sj5))+(((2.0)*sj0))+(((-4.0)*pz*sj0))+(((3.12e-6)*cj4*cj5*r21*sj0)))))))+(((8514.9863760218)*(IKabs(((((1.332e-5)*r00*sj4*sj5))+(((1.476)*cj5*r20*sj0))+(((1.332e-5)*cj4*r02))+(((9.36e-6)*cj4*r20*sj0*sj5))+(((-1.476)*r21*sj0*sj5))+(((-12.0)*pz*sj0))+(((-9.36e-6)*r22*sj0*sj4))+(((-6.324)*r20*sj0*sj4*sj5))+(((1.332e-5)*cj5*r01*sj4))+(((9.36e-6)*cj4*cj5*r21*sj0))+(((-6.324)*cj5*r21*sj0*sj4))+(((-2.0)*sj0))+(((-6.324)*cj4*r22*sj0)))))))+(((8514.9863760218)*(IKabs(((((1.332e-5)*r00*sj4*sj5))+(((1.476)*cj5*r20*sj0))+(((1.332e-5)*cj4*r02))+(((9.36e-6)*cj4*r20*sj0*sj5))+(((-1.476)*r21*sj0*sj5))+(((-12.0)*pz*sj0))+(((-9.36e-6)*r22*sj0*sj4))+(((-6.324)*r20*sj0*sj4*sj5))+(((1.332e-5)*cj5*r01*sj4))+(((9.36e-6)*cj4*cj5*r21*sj0))+(((-6.324)*cj5*r21*sj0*sj4))+(((-6.324)*cj4*r22*sj0))+(((2.0)*sj0)))))))+(((8514.9863760218)*(IKabs(((((-1.476)*cj0*cj5*r20))+(((2.0)*cj0))+(((6.324)*cj0*r20*sj4*sj5))+(((1.332e-5)*cj4*r12))+(((-9.36e-6)*cj0*cj4*cj5*r21))+(((-9.36e-6)*cj0*cj4*r20*sj5))+(((1.476)*cj0*r21*sj5))+(((1.332e-5)*cj5*r11*sj4))+(((12.0)*cj0*pz))+(((6.324)*cj0*cj4*r22))+(((9.36e-6)*cj0*r22*sj4))+(((1.332e-5)*r10*sj4*sj5))+(((6.324)*cj0*cj5*r21*sj4)))))))+(IKabs(cj0))+(((8514.9863760218)*(IKabs(((((-1.476)*cj0*cj5*r20))+(((6.324)*cj0*r20*sj4*sj5))+(((1.332e-5)*cj4*r12))+(((-9.36e-6)*cj0*cj4*cj5*r21))+(((-9.36e-6)*cj0*cj4*r20*sj5))+(((1.476)*cj0*r21*sj5))+(((1.332e-5)*cj5*r11*sj4))+(((-2.0)*cj0))+(((12.0)*cj0*pz))+(((6.324)*cj0*cj4*r22))+(((9.36e-6)*cj0*r22*sj4))+(((1.332e-5)*r10*sj4*sj5))+(((6.324)*cj0*cj5*r21*sj4)))))))+(IKabs(sj0))+(((8514.9863760218)*(IKabs(((((3.12e-6)*cj0*r22*sj4))+(((4.0)*cj0*pz))+(((-3.12e-6)*cj0*cj4*r20*sj5))+(((2.108)*cj0*r20*sj4*sj5))+(((4.44e-6)*cj4*r12))+(((2.108)*cj0*cj4*r22))+(((2.108)*cj0*cj5*r21*sj4))+(((-2.0)*cj0))+(((4.44e-6)*r10*sj4*sj5))+(((-0.492)*cj0*cj5*r20))+(((4.44e-6)*cj5*r11*sj4))+(((-3.12e-6)*cj0*cj4*cj5*r21))+(((0.492)*cj0*r21*sj5))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2213=((2.0)*sj0);
IkReal x2214=(sj0*sj4);
IkReal x2215=(r20*sj5);
IkReal x2216=(cj4*sj0);
IkReal x2217=(cj5*r21);
IkReal x2218=(cj4*r02);
IkReal x2219=((1.476)*sj0);
IkReal x2220=(r21*sj5);
IkReal x2221=(cj5*r20);
IkReal x2222=(pz*sj0);
IkReal x2223=((0.492)*sj0);
IkReal x2224=((1.332e-5)*x2218);
IkReal x2225=((12.0)*x2222);
IkReal x2226=((-2.936e-5)*sj0);
IkReal x2227=((4.44e-6)*x2218);
IkReal x2228=((4.0)*x2222);
IkReal x2229=(cj5*r01*sj4);
IkReal x2230=(r00*sj4*sj5);
IkReal x2231=((1.332e-5)*x2230);
IkReal x2232=(x2219*x2221);
IkReal x2233=((1.332e-5)*x2229);
IkReal x2234=((9.36e-6)*r22*x2214);
IkReal x2235=(x2219*x2220);
IkReal x2236=((6.324)*r22*x2216);
IkReal x2237=((4.44e-6)*x2229);
IkReal x2238=((4.44e-6)*x2230);
IkReal x2239=(x2221*x2223);
IkReal x2240=((3.12e-6)*r22*x2214);
IkReal x2241=((2.108)*r22*x2216);
IkReal x2242=(x2220*x2223);
IkReal x2243=((9.36e-6)*x2215*x2216);
IkReal x2244=((9.36e-6)*x2216*x2217);
IkReal x2245=((6.324)*x2214*x2217);
IkReal x2246=((6.324)*x2214*x2215);
IkReal x2247=((3.12e-6)*x2215*x2216);
IkReal x2248=((3.12e-6)*x2216*x2217);
IkReal x2249=((2.108)*x2214*x2217);
IkReal x2250=((2.108)*x2214*x2215);
IkReal x2251=(x2227+x2239+x2238+x2237+x2248+x2247);
IkReal x2252=(x2228+x2249+x2240+x2241+x2242+x2250);
IkReal x2253=(x2225+x2235+x2234+x2236+x2245+x2246);
IkReal x2254=(x2224+x2231+x2233+x2232+x2244+x2243);
op[0]=(x2213+x2251+(((-1.0)*x2252)));
op[1]=x2226;
op[2]=(x2213+x2254+(((-1.0)*x2253)));
op[3]=((-5.872e-5)*sj0);
op[4]=(x2254+(((-1.0)*x2213))+(((-1.0)*x2253)));
op[5]=x2226;
op[6]=(x2251+(((-1.0)*x2213))+(((-1.0)*x2252)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2255=((2.0)*cj0);
IkReal x2256=(cj0*sj4);
IkReal x2257=(r20*sj5);
IkReal x2258=(cj0*cj4);
IkReal x2259=((1.332e-5)*sj4);
IkReal x2260=(cj5*r11);
IkReal x2261=(cj5*r21);
IkReal x2262=(r10*sj5);
IkReal x2263=((4.44e-6)*sj4);
IkReal x2264=((2.936e-5)*cj0);
IkReal x2265=(cj4*r12);
IkReal x2266=(cj0*pz);
IkReal x2267=((4.0)*x2266);
IkReal x2268=((4.44e-6)*x2265);
IkReal x2269=((1.332e-5)*x2265);
IkReal x2270=((12.0)*x2266);
IkReal x2271=(cj0*r21*sj5);
IkReal x2272=(cj0*cj5*r20);
IkReal x2273=((3.12e-6)*r22*x2256);
IkReal x2274=((2.108)*r22*x2258);
IkReal x2275=((1.476)*x2271);
IkReal x2276=(x2259*x2260);
IkReal x2277=((6.324)*r22*x2258);
IkReal x2278=((9.36e-6)*r22*x2256);
IkReal x2279=(x2259*x2262);
IkReal x2280=((1.476)*x2272);
IkReal x2281=(x2262*x2263);
IkReal x2282=(x2260*x2263);
IkReal x2283=((0.492)*x2271);
IkReal x2284=((0.492)*x2272);
IkReal x2285=((2.108)*x2256*x2257);
IkReal x2286=((2.108)*x2256*x2261);
IkReal x2287=((6.324)*x2256*x2257);
IkReal x2288=((6.324)*x2256*x2261);
IkReal x2289=((9.36e-6)*x2257*x2258);
IkReal x2290=((9.36e-6)*x2258*x2261);
IkReal x2291=((3.12e-6)*x2257*x2258);
IkReal x2292=((3.12e-6)*x2258*x2261);
IkReal x2293=(x2289+x2280+x2290);
IkReal x2294=(x2284+x2292+x2291);
IkReal x2295=(x2281+x2282+x2283+x2285+x2286+x2268+x2267+x2274+x2273);
IkReal x2296=(x2288+x2287+x2269+x2275+x2277+x2276+x2270+x2279+x2278);
j1evalpoly[0]=(((htj1*x2264))+x2295+x2255+(((5.872e-5)*cj0*(htj1*htj1*htj1)))+((x2264*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*((x2296+x2255+(((-1.0)*x2293))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2295+(((-1.0)*x2255))+(((-1.0)*x2294))))))+(((htj1*htj1*htj1*htj1)*((x2296+(((-1.0)*x2255))+(((-1.0)*x2293))))))+(((-1.0)*x2294)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2297=(sj1*sj3);
IkReal x2298=(r21*sj5);
IkReal x2299=(cj5*r20);
IkReal x2300=(cj1*cj3);
IkReal x2301=(r22*sj4);
IkReal x2302=(r20*sj5);
IkReal x2303=(cj5*r21);
IkReal x2304=(cj4*r22);
IkReal x2305=(cj1*sj3);
IkReal x2306=(cj1*sj4);
IkReal x2307=(sj1*sj4);
IkReal x2308=(cj3*sj1);
IkReal x2309=((1.0)*cj4);
if( IKabs((((sj1*x2304))+((x2303*x2307))+((cj4*x2300*x2302))+((cj4*x2300*x2303))+(((-1.0)*x2300*x2301))+(((-1.0)*x2298*x2305))+((x2299*x2305))+((x2302*x2307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2303*x2306))+((cj1*x2304))+((x2301*x2308))+(((-1.0)*x2302*x2308*x2309))+(((-1.0)*x2297*x2299))+((x2297*x2298))+(((-1.0)*x2303*x2308*x2309))+((x2302*x2306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2304))+((x2303*x2307))+((cj4*x2300*x2302))+((cj4*x2300*x2303))+(((-1.0)*x2300*x2301))+(((-1.0)*x2298*x2305))+((x2299*x2305))+((x2302*x2307))))+IKsqr((((x2303*x2306))+((cj1*x2304))+((x2301*x2308))+(((-1.0)*x2302*x2308*x2309))+(((-1.0)*x2297*x2299))+((x2297*x2298))+(((-1.0)*x2303*x2308*x2309))+((x2302*x2306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2304))+((x2303*x2307))+((cj4*x2300*x2302))+((cj4*x2300*x2303))+(((-1.0)*x2300*x2301))+(((-1.0)*x2298*x2305))+((x2299*x2305))+((x2302*x2307))), (((x2303*x2306))+((cj1*x2304))+((x2301*x2308))+(((-1.0)*x2302*x2308*x2309))+(((-1.0)*x2297*x2299))+((x2297*x2298))+(((-1.0)*x2303*x2308*x2309))+((x2302*x2306))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2310=IKsin(j2);
IkReal x2311=IKcos(j2);
IkReal x2312=(cj5*r00);
IkReal x2313=(cj3*cj4);
IkReal x2314=(r00*sj5);
IkReal x2315=((1.11e-6)*cj0);
IkReal x2316=((7.8e-7)*sj4);
IkReal x2317=((1.0)*cj0);
IkReal x2318=(r21*sj5);
IkReal x2319=((0.123)*cj5);
IkReal x2320=((1.0)*sj4);
IkReal x2321=(r10*sj5);
IkReal x2322=(cj5*r21);
IkReal x2323=((0.5)*sj1);
IkReal x2324=(r20*sj5);
IkReal x2325=((1.0)*cj4);
IkReal x2326=(cj5*sj3);
IkReal x2327=((1.0)*sj3);
IkReal x2328=(r11*sj5);
IkReal x2329=((1.11e-6)*sj0);
IkReal x2330=(r01*sj5);
IkReal x2331=((0.527)*cj0);
IkReal x2332=((3.67e-6)*cj1);
IkReal x2333=(cj5*r01);
IkReal x2334=((7.8e-7)*cj4);
IkReal x2335=(cj5*r11);
IkReal x2336=(cj1*x2311);
IkReal x2337=(cj3*x2320);
IkReal x2338=(sj1*x2310);
IkReal x2339=(cj5*x2334);
IkReal x2340=(cj1*x2310);
IkReal x2341=(sj1*x2311);
IkReal x2342=(sj0*x2341);
evalcond[0]=((((-1.0)*r22*x2325))+x2336+x2338+(((-1.0)*x2320*x2322))+(((-1.0)*x2320*x2324)));
evalcond[1]=(((sj0*x2340))+(((-1.0)*x2320*x2333))+(((-1.0)*x2342))+(((-1.0)*x2314*x2320))+(((-1.0)*r02*x2325)));
evalcond[2]=((((-1.0)*x2320*x2335))+(((-1.0)*x2320*x2321))+(((-1.0)*r12*x2325))+(((-1.0)*x2317*x2340))+((cj0*x2341)));
evalcond[3]=((((-1.0)*x2318*x2327))+x2341+(((-1.0)*r22*x2337))+(((-1.0)*x2340))+((r20*x2326))+((x2313*x2322))+((x2313*x2324)));
evalcond[4]=(((sj3*x2312))+((x2313*x2333))+((sj0*x2336))+((sj0*x2338))+(((-1.0)*r02*x2337))+(((-1.0)*x2327*x2330))+((x2313*x2314)));
evalcond[5]=(((r10*x2326))+((x2313*x2335))+(((-1.0)*x2327*x2328))+(((-1.0)*r12*x2337))+((x2313*x2321))+(((-1.0)*x2317*x2336))+(((-1.0)*x2317*x2338)));
evalcond[6]=((((-1.0)*r22*x2316))+(((-1.11e-6)*x2341))+(((-3.67e-6)*sj1))+((x2322*x2334))+(((-1.0)*pz))+((x2324*x2334))+(((-0.123)*x2318))+((r20*x2319))+(((-0.5)*cj1))+(((1.11e-6)*x2340))+(((-0.527)*x2336))+(((-0.527)*x2338)));
evalcond[7]=(((x2333*x2334))+((x2314*x2334))+(((0.527)*x2342))+(((0.058999)*cj0))+((sj0*x2323))+(((-0.123)*x2330))+(((-1.0)*px))+(((-1.0)*x2329*x2338))+(((-1.0)*x2329*x2336))+(((-1.0)*r02*x2316))+(((0.123)*x2312))+(((-0.527)*sj0*x2340))+(((-1.0)*sj0*x2332)));
evalcond[8]=(((x2315*x2336))+((x2315*x2338))+((x2331*x2340))+(((-1.0)*x2331*x2341))+((r10*x2319))+(((-1.0)*cj0*x2323))+((x2321*x2334))+((x2334*x2335))+(((-1.0)*py))+(((-0.123)*x2328))+(((0.058999)*sj0))+(((-1.0)*r12*x2316))+((cj0*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "d595cfc1c231a104ac0d942a0cef21d0"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
